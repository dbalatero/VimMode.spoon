[
  {
    "Constant" : [
      {
        "desc" : "A table of common accessibility object roles, provided for reference.",
        "stripped_doc" : [
          "A table of common accessibility object roles, provided for reference.",
          ""
        ],
        "def" : "hs._asm.axuielement.roles[]",
        "doc" : "A table of common accessibility object roles, provided for reference.\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.",
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive."
        ],
        "signature" : "hs._asm.axuielement.roles[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "roles",
        "parameters" : [

        ]
      },
      {
        "desc" : "A table of common accessibility object subroles, provided for reference.",
        "stripped_doc" : [
          "A table of common accessibility object subroles, provided for reference.",
          ""
        ],
        "def" : "hs._asm.axuielement.subroles[]",
        "doc" : "A table of common accessibility object subroles, provided for reference.\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.",
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive."
        ],
        "signature" : "hs._asm.axuielement.subroles[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "subroles",
        "parameters" : [

        ]
      },
      {
        "desc" : "A table of common accessibility object attribute names, provided for reference. The names are grouped into the following subcategories (keys):",
        "stripped_doc" : [
          "A table of common accessibility object attribute names, provided for reference. The names are grouped into the following subcategories (keys):",
          "",
          " * `application`",
          " * `dock`",
          " * `general`",
          " * `matte`",
          " * `menu`",
          " * `misc`",
          " * `system`",
          " * `table`",
          " * `text`",
          " * `window`",
          ""
        ],
        "def" : "hs._asm.axuielement.attributes[]",
        "doc" : "A table of common accessibility object attribute names, provided for reference. The names are grouped into the following subcategories (keys):\n\n * `application`\n * `dock`\n * `general`\n * `matte`\n * `menu`\n * `misc`\n * `system`\n * `table`\n * `text`\n * `window`\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.\n * the category name indicates the type of accessibility object likely to contain the member elements.",
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive.",
          " * the category name indicates the type of accessibility object likely to contain the member elements."
        ],
        "signature" : "hs._asm.axuielement.attributes[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "attributes",
        "parameters" : [

        ]
      },
      {
        "desc" : "A table of common accessibility object parameterized attribute names, provided for reference.",
        "stripped_doc" : [
          "A table of common accessibility object parameterized attribute names, provided for reference.",
          ""
        ],
        "def" : "hs._asm.axuielement.parameterizedAttributes[]",
        "doc" : "A table of common accessibility object parameterized attribute names, provided for reference.\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.",
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive."
        ],
        "signature" : "hs._asm.axuielement.parameterizedAttributes[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "parameterizedAttributes",
        "parameters" : [

        ]
      },
      {
        "desc" : "A table of common accessibility object action names, provided for reference.",
        "stripped_doc" : [
          "A table of common accessibility object action names, provided for reference.",
          ""
        ],
        "def" : "hs._asm.axuielement.actions[]",
        "doc" : "A table of common accessibility object action names, provided for reference.\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.",
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive."
        ],
        "signature" : "hs._asm.axuielement.actions[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "actions",
        "parameters" : [

        ]
      },
      {
        "desc" : "A table of common directions which may be specified as the value of an accessibility object property, provided for reference.",
        "stripped_doc" : [
          "A table of common directions which may be specified as the value of an accessibility object property, provided for reference.",
          ""
        ],
        "def" : "hs._asm.axuielement.directions[]",
        "doc" : "A table of common directions which may be specified as the value of an accessibility object property, provided for reference.\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.",
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive."
        ],
        "signature" : "hs._asm.axuielement.directions[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "directions",
        "parameters" : [

        ]
      }
    ],
    "submodules" : [
      "observer"
    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "desc" : "This module allows you to access the accessibility objects of running applications, their windows, menus, and other user interface elements that support the OS X accessibility API.",
    "Deprecated" : [

    ],
    "type" : "Module",
    "Constructor" : [
      {
        "desc" : "Returns the accessibility object at the specified position in top-left relative screen coordinates.",
        "stripped_doc" : [
          "Returns the accessibility object at the specified position in top-left relative screen coordinates.",
          ""
        ],
        "def" : "hs._asm.axuielement.systemElementAtPosition(x, y | { x, y }) -> axuielementObject",
        "doc" : "Returns the accessibility object at the specified position in top-left relative screen coordinates.\n\nParameters:\n * `x`, `y`   - the x and y coordinates of the screen location to test, provided as separate parameters\n * `{ x, y }` - the x and y coordinates of the screen location to test, provided as a point-table, like the one returned by `hs.mouse.getAbsolutePosition`.\n\nReturns:\n * an axuielementObject for the object at the specified coordinates, or nil if no object could be identified.\n\nNotes:\n * See also [hs._asm.axuielement:elementAtPosition](#elementAtPosition) -- this function is a shortcut for `hs._asm.axuielement.systemWideElement():elementAtPosition(...)`.\n\n * This function does hit-testing based on window z-order (that is, layering). If one window is on top of another window, the returned accessibility object comes from whichever window is topmost at the specified location.",
        "notes" : [
          " * See also [hs._asm.axuielement:elementAtPosition](#elementAtPosition) -- this function is a shortcut for `hs._asm.axuielement.systemWideElement():elementAtPosition(...)`.",
          "",
          " * This function does hit-testing based on window z-order (that is, layering). If one window is on top of another window, the returned accessibility object comes from whichever window is topmost at the specified location."
        ],
        "signature" : "hs._asm.axuielement.systemElementAtPosition(x, y | { x, y }) -> axuielementObject",
        "type" : "Constructor",
        "returns" : [
          " * an axuielementObject for the object at the specified coordinates, or nil if no object could be identified.",
          ""
        ],
        "name" : "systemElementAtPosition",
        "parameters" : [
          " * `x`, `y`   - the x and y coordinates of the screen location to test, provided as separate parameters",
          " * `{ x, y }` - the x and y coordinates of the screen location to test, provided as a point-table, like the one returned by `hs.mouse.getAbsolutePosition`.",
          ""
        ]
      },
      {
        "desc" : "Returns the accessibility object for the window specified by the `hs.window` object.",
        "stripped_doc" : [
          "Returns the accessibility object for the window specified by the `hs.window` object.",
          ""
        ],
        "def" : "hs._asm.axuielement.windowElement(windowObject) -> axuielementObject",
        "doc" : "Returns the accessibility object for the window specified by the `hs.window` object.\n\nParameters:\n * `windowObject` - the `hs.window` object for the window.\n\nReturns:\n * an axuielementObject for the window specified",
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement.windowElement(windowObject) -> axuielementObject",
        "type" : "Constructor",
        "returns" : [
          " * an axuielementObject for the window specified"
        ],
        "name" : "windowElement",
        "parameters" : [
          " * `windowObject` - the `hs.window` object for the window.",
          ""
        ]
      },
      {
        "desc" : "Returns the top-level accessibility object for the application specified by the `hs.application` object.",
        "stripped_doc" : [
          "Returns the top-level accessibility object for the application specified by the `hs.application` object.",
          ""
        ],
        "def" : "hs._asm.axuielement.applicationElement(applicationObject) -> axuielementObject",
        "doc" : "Returns the top-level accessibility object for the application specified by the `hs.application` object.\n\nParameters:\n * `applicationObject` - the `hs.application` object for the Application.\n\nReturns:\n * an axuielementObject for the application specified",
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement.applicationElement(applicationObject) -> axuielementObject",
        "type" : "Constructor",
        "returns" : [
          " * an axuielementObject for the application specified"
        ],
        "name" : "applicationElement",
        "parameters" : [
          " * `applicationObject` - the `hs.application` object for the Application.",
          ""
        ]
      },
      {
        "desc" : "Returns an accessibility object that provides access to system attributes.",
        "stripped_doc" : [
          "Returns an accessibility object that provides access to system attributes.",
          ""
        ],
        "def" : "hs._asm.axuielement.systemWideElement() -> axuielementObject",
        "doc" : "Returns an accessibility object that provides access to system attributes.\n\nParameters:\n * None\n\nReturns:\n * the axuielementObject for the system attributes",
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement.systemWideElement() -> axuielementObject",
        "type" : "Constructor",
        "returns" : [
          " * the axuielementObject for the system attributes"
        ],
        "name" : "systemWideElement",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Returns the top-level accessibility object for the application with the specified process ID.",
        "stripped_doc" : [
          "Returns the top-level accessibility object for the application with the specified process ID.",
          ""
        ],
        "def" : "hs._asm.axuielement.applicationElementForPID(pid) -> axuielementObject",
        "doc" : "Returns the top-level accessibility object for the application with the specified process ID.\n\nParameters:\n * `pid` - the process ID of the application.\n\nReturns:\n * an axuielementObject for the application specified, or nil if it cannot be determined",
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement.applicationElementForPID(pid) -> axuielementObject",
        "type" : "Constructor",
        "returns" : [
          " * an axuielementObject for the application specified, or nil if it cannot be determined"
        ],
        "name" : "applicationElementForPID",
        "parameters" : [
          " * `pid` - the process ID of the application.",
          ""
        ]
      }
    ],
    "doc" : "This module allows you to access the accessibility objects of running applications, their windows, menus, and other user interface elements that support the OS X accessibility API.\n\nThis is very much a work in progress, so bugs and comments are welcome.\n\nThis module works through the use of axuielementObjects, which is the Hammerspoon representation for an accessibility object.  An accessibility object represents any object or component of an OS X application which can be manipulated through the OS X Accessibility API -- it can be an application, a window, a button, selected text, etc.  As such, it can only support those features and objects within an application that the application developers make available through the Accessibility API.\n\nThe basic methods available to determine what attributes and actions are available for a given object are described in this reference documentation.  In addition, the module will dynamically add methods for the attributes and actions appropriate to the object, but these will differ between object roles and applications -- again we are limited by what the target application developers provide us.\n\nThe dynamically generated methods will follow one of the following templates:\n * `object:*attribute*()`         - this will return the value for the specified attribute (see [hs._asm.axuielement:attributeValue](#attributeValue) for the generic function this is based on).\n * `object:set*attribute*(value)` - this will set the specified attribute to the given value (see [hs._asm.axuielement:setAttributeValue](#setAttributeValue) for the generic function this is based on).\n * `object:do*action*()`          - this request that the specified action is performed by the object (see [hs._asm.axuielement:performAction](#performAction) for the generic function this is based on).\n\nWhere *action* and *attribute* can be the formal Accessibility version of the attribute or action name (a string usually prefixed with \"AX\") or without the \"AX\" prefix.  When the prefix is left off, the first letter of the action or attribute can be uppercase or lowercase.\n\nThe module also dynamically supports treating the axuielementObject useradata as an array, to access it's children (i.e. `#object` will return a number, indicating the number of direct children the object has, and `object[1]` is equivalent to `object:children()[1]` or, more formally, `object:attributeValue(\"AXChildren\")[1]`).\n\nYou can also treat the axuielementObject userdata as a table of key-value pairs to generate a list of the dynamically generated functions: `for k, v in pairs(object) do print(k, v) end` (this is essentially what [hs._asm.axuielement:dynamicMethods](#dynamicMethods) does).\n\n\nLimited support for parameterized attributes is provided, but is not yet complete.  This is expected to see updates in the future.",
    "Field" : [

    ],
    "Command" : [

    ],
    "items" : [
      {
        "desc" : "A table of common accessibility object action names, provided for reference.",
        "stripped_doc" : [
          "A table of common accessibility object action names, provided for reference.",
          ""
        ],
        "def" : "hs._asm.axuielement.actions[]",
        "doc" : "A table of common accessibility object action names, provided for reference.\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.",
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive."
        ],
        "signature" : "hs._asm.axuielement.actions[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "actions",
        "parameters" : [

        ]
      },
      {
        "desc" : "A table of common accessibility object attribute names, provided for reference. The names are grouped into the following subcategories (keys):",
        "stripped_doc" : [
          "A table of common accessibility object attribute names, provided for reference. The names are grouped into the following subcategories (keys):",
          "",
          " * `application`",
          " * `dock`",
          " * `general`",
          " * `matte`",
          " * `menu`",
          " * `misc`",
          " * `system`",
          " * `table`",
          " * `text`",
          " * `window`",
          ""
        ],
        "def" : "hs._asm.axuielement.attributes[]",
        "doc" : "A table of common accessibility object attribute names, provided for reference. The names are grouped into the following subcategories (keys):\n\n * `application`\n * `dock`\n * `general`\n * `matte`\n * `menu`\n * `misc`\n * `system`\n * `table`\n * `text`\n * `window`\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.\n * the category name indicates the type of accessibility object likely to contain the member elements.",
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive.",
          " * the category name indicates the type of accessibility object likely to contain the member elements."
        ],
        "signature" : "hs._asm.axuielement.attributes[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "attributes",
        "parameters" : [

        ]
      },
      {
        "desc" : "A table of common directions which may be specified as the value of an accessibility object property, provided for reference.",
        "stripped_doc" : [
          "A table of common directions which may be specified as the value of an accessibility object property, provided for reference.",
          ""
        ],
        "def" : "hs._asm.axuielement.directions[]",
        "doc" : "A table of common directions which may be specified as the value of an accessibility object property, provided for reference.\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.",
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive."
        ],
        "signature" : "hs._asm.axuielement.directions[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "directions",
        "parameters" : [

        ]
      },
      {
        "desc" : "A table of common accessibility object parameterized attribute names, provided for reference.",
        "stripped_doc" : [
          "A table of common accessibility object parameterized attribute names, provided for reference.",
          ""
        ],
        "def" : "hs._asm.axuielement.parameterizedAttributes[]",
        "doc" : "A table of common accessibility object parameterized attribute names, provided for reference.\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.",
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive."
        ],
        "signature" : "hs._asm.axuielement.parameterizedAttributes[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "parameterizedAttributes",
        "parameters" : [

        ]
      },
      {
        "desc" : "A table of common accessibility object roles, provided for reference.",
        "stripped_doc" : [
          "A table of common accessibility object roles, provided for reference.",
          ""
        ],
        "def" : "hs._asm.axuielement.roles[]",
        "doc" : "A table of common accessibility object roles, provided for reference.\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.",
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive."
        ],
        "signature" : "hs._asm.axuielement.roles[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "roles",
        "parameters" : [

        ]
      },
      {
        "desc" : "A table of common accessibility object subroles, provided for reference.",
        "stripped_doc" : [
          "A table of common accessibility object subroles, provided for reference.",
          ""
        ],
        "def" : "hs._asm.axuielement.subroles[]",
        "doc" : "A table of common accessibility object subroles, provided for reference.\n\nNotes:\n * this table is provided for reference only and is not intended to be comprehensive.",
        "notes" : [
          " * this table is provided for reference only and is not intended to be comprehensive."
        ],
        "signature" : "hs._asm.axuielement.subroles[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "subroles",
        "parameters" : [

        ]
      },
      {
        "desc" : "Returns the top-level accessibility object for the application specified by the `hs.application` object.",
        "stripped_doc" : [
          "Returns the top-level accessibility object for the application specified by the `hs.application` object.",
          ""
        ],
        "def" : "hs._asm.axuielement.applicationElement(applicationObject) -> axuielementObject",
        "doc" : "Returns the top-level accessibility object for the application specified by the `hs.application` object.\n\nParameters:\n * `applicationObject` - the `hs.application` object for the Application.\n\nReturns:\n * an axuielementObject for the application specified",
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement.applicationElement(applicationObject) -> axuielementObject",
        "type" : "Constructor",
        "returns" : [
          " * an axuielementObject for the application specified"
        ],
        "name" : "applicationElement",
        "parameters" : [
          " * `applicationObject` - the `hs.application` object for the Application.",
          ""
        ]
      },
      {
        "desc" : "Returns the top-level accessibility object for the application with the specified process ID.",
        "stripped_doc" : [
          "Returns the top-level accessibility object for the application with the specified process ID.",
          ""
        ],
        "def" : "hs._asm.axuielement.applicationElementForPID(pid) -> axuielementObject",
        "doc" : "Returns the top-level accessibility object for the application with the specified process ID.\n\nParameters:\n * `pid` - the process ID of the application.\n\nReturns:\n * an axuielementObject for the application specified, or nil if it cannot be determined",
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement.applicationElementForPID(pid) -> axuielementObject",
        "type" : "Constructor",
        "returns" : [
          " * an axuielementObject for the application specified, or nil if it cannot be determined"
        ],
        "name" : "applicationElementForPID",
        "parameters" : [
          " * `pid` - the process ID of the application.",
          ""
        ]
      },
      {
        "desc" : "Returns the accessibility object at the specified position in top-left relative screen coordinates.",
        "stripped_doc" : [
          "Returns the accessibility object at the specified position in top-left relative screen coordinates.",
          ""
        ],
        "def" : "hs._asm.axuielement.systemElementAtPosition(x, y | { x, y }) -> axuielementObject",
        "doc" : "Returns the accessibility object at the specified position in top-left relative screen coordinates.\n\nParameters:\n * `x`, `y`   - the x and y coordinates of the screen location to test, provided as separate parameters\n * `{ x, y }` - the x and y coordinates of the screen location to test, provided as a point-table, like the one returned by `hs.mouse.getAbsolutePosition`.\n\nReturns:\n * an axuielementObject for the object at the specified coordinates, or nil if no object could be identified.\n\nNotes:\n * See also [hs._asm.axuielement:elementAtPosition](#elementAtPosition) -- this function is a shortcut for `hs._asm.axuielement.systemWideElement():elementAtPosition(...)`.\n\n * This function does hit-testing based on window z-order (that is, layering). If one window is on top of another window, the returned accessibility object comes from whichever window is topmost at the specified location.",
        "notes" : [
          " * See also [hs._asm.axuielement:elementAtPosition](#elementAtPosition) -- this function is a shortcut for `hs._asm.axuielement.systemWideElement():elementAtPosition(...)`.",
          "",
          " * This function does hit-testing based on window z-order (that is, layering). If one window is on top of another window, the returned accessibility object comes from whichever window is topmost at the specified location."
        ],
        "signature" : "hs._asm.axuielement.systemElementAtPosition(x, y | { x, y }) -> axuielementObject",
        "type" : "Constructor",
        "returns" : [
          " * an axuielementObject for the object at the specified coordinates, or nil if no object could be identified.",
          ""
        ],
        "name" : "systemElementAtPosition",
        "parameters" : [
          " * `x`, `y`   - the x and y coordinates of the screen location to test, provided as separate parameters",
          " * `{ x, y }` - the x and y coordinates of the screen location to test, provided as a point-table, like the one returned by `hs.mouse.getAbsolutePosition`.",
          ""
        ]
      },
      {
        "desc" : "Returns an accessibility object that provides access to system attributes.",
        "stripped_doc" : [
          "Returns an accessibility object that provides access to system attributes.",
          ""
        ],
        "def" : "hs._asm.axuielement.systemWideElement() -> axuielementObject",
        "doc" : "Returns an accessibility object that provides access to system attributes.\n\nParameters:\n * None\n\nReturns:\n * the axuielementObject for the system attributes",
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement.systemWideElement() -> axuielementObject",
        "type" : "Constructor",
        "returns" : [
          " * the axuielementObject for the system attributes"
        ],
        "name" : "systemWideElement",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Returns the accessibility object for the window specified by the `hs.window` object.",
        "stripped_doc" : [
          "Returns the accessibility object for the window specified by the `hs.window` object.",
          ""
        ],
        "def" : "hs._asm.axuielement.windowElement(windowObject) -> axuielementObject",
        "doc" : "Returns the accessibility object for the window specified by the `hs.window` object.\n\nParameters:\n * `windowObject` - the `hs.window` object for the window.\n\nReturns:\n * an axuielementObject for the window specified",
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement.windowElement(windowObject) -> axuielementObject",
        "type" : "Constructor",
        "returns" : [
          " * an axuielementObject for the window specified"
        ],
        "name" : "windowElement",
        "parameters" : [
          " * `windowObject` - the `hs.window` object for the window.",
          ""
        ]
      },
      {
        "desc" : "Returns a localized description of the specified accessibility object's action.",
        "stripped_doc" : [
          "Returns a localized description of the specified accessibility object's action.",
          ""
        ],
        "def" : "hs._asm.axuielement:actionDescription(action) -> string",
        "doc" : "Returns a localized description of the specified accessibility object's action.\n\nParameters:\n * `action` - the name of the action, as specified by [hs._asm.axuielement:actionNames](#actionNames).\n\nReturns:\n * a string containing a description of the object's action\n\nNotes:\n * The action descriptions are provided by the target application; as such their accuracy and usefulness rely on the target application's developers.",
        "notes" : [
          " * The action descriptions are provided by the target application; as such their accuracy and usefulness rely on the target application's developers."
        ],
        "signature" : "hs._asm.axuielement:actionDescription(action) -> string",
        "type" : "Method",
        "returns" : [
          " * a string containing a description of the object's action",
          ""
        ],
        "name" : "actionDescription",
        "parameters" : [
          " * `action` - the name of the action, as specified by [hs._asm.axuielement:actionNames](#actionNames).",
          ""
        ]
      },
      {
        "desc" : "Returns a list of all the actions the specified accessibility object can perform.",
        "stripped_doc" : [
          "Returns a list of all the actions the specified accessibility object can perform.",
          ""
        ],
        "def" : "hs._asm.axuielement:actionNames() -> table",
        "doc" : "Returns a list of all the actions the specified accessibility object can perform.\n\nParameters:\n * None\n\nReturns:\n * an array of the names of all actions supported by the axuielementObject\n\nNotes:\n * Common action names can be found in the [hs._asm.axuielement.actions](#actions) table; however, this method will list only those names which are supported by this object, and is not limited to just those in the referenced table.",
        "notes" : [
          " * Common action names can be found in the [hs._asm.axuielement.actions](#actions) table; however, this method will list only those names which are supported by this object, and is not limited to just those in the referenced table."
        ],
        "signature" : "hs._asm.axuielement:actionNames() -> table",
        "type" : "Method",
        "returns" : [
          " * an array of the names of all actions supported by the axuielementObject",
          ""
        ],
        "name" : "actionNames",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Returns a table containing key-value pairs for all attributes of the accessibility object.",
        "stripped_doc" : [
          "Returns a table containing key-value pairs for all attributes of the accessibility object.",
          ""
        ],
        "def" : "hs._asm.axuielement:allAttributeValues([includeErrors]) -> table",
        "doc" : "Returns a table containing key-value pairs for all attributes of the accessibility object.\n\nParameters:\n * `includeErrors` - an optional boolean, default false, that specifies whether attribute names which generate an error when retrieved are included in the returned results.\n\nReturns:\n * a table with key-value pairs corresponding to the attributes of the accessibility object.",
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement:allAttributeValues([includeErrors]) -> table",
        "type" : "Method",
        "returns" : [
          " * a table with key-value pairs corresponding to the attributes of the accessibility object."
        ],
        "name" : "allAttributeValues",
        "parameters" : [
          " * `includeErrors` - an optional boolean, default false, that specifies whether attribute names which generate an error when retrieved are included in the returned results.",
          ""
        ]
      },
      {
        "desc" : "If the element referes to an application, return an `hs.application` object for the element.",
        "stripped_doc" : [
          "If the element referes to an application, return an `hs.application` object for the element.",
          ""
        ],
        "def" : "hs._asm.axuielement:asHSApplication() -> hs.application object | nil",
        "doc" : "If the element referes to an application, return an `hs.application` object for the element.\n\nParameters:\n * None\n\nReturns:\n * if the element refers to an application, return an `hs.application` object for the element ; otherwise return nil\n\nNotes:\n * An element is considered an application by this method if it has an AXRole of AXApplication and has a process identifier (pid).",
        "notes" : [
          " * An element is considered an application by this method if it has an AXRole of AXApplication and has a process identifier (pid)."
        ],
        "signature" : "hs._asm.axuielement:asHSApplication() -> hs.application object | nil",
        "type" : "Method",
        "returns" : [
          " * if the element refers to an application, return an `hs.application` object for the element ; otherwise return nil",
          ""
        ],
        "name" : "asHSApplication",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "If the element referes to a window, return an `hs.window` object for the element.",
        "stripped_doc" : [
          "If the element referes to a window, return an `hs.window` object for the element.",
          ""
        ],
        "def" : "hs._asm.axuielement:asHSWindow() -> hs.window object | nil",
        "doc" : "If the element referes to a window, return an `hs.window` object for the element.\n\nParameters:\n * None\n\nReturns:\n * if the element refers to a window, return an `hs.window` object for the element ; otherwise return nil\n\nNotes:\n * An element is considered a window by this method if it has an AXRole of AXWindow.",
        "notes" : [
          " * An element is considered a window by this method if it has an AXRole of AXWindow."
        ],
        "signature" : "hs._asm.axuielement:asHSWindow() -> hs.window object | nil",
        "type" : "Method",
        "returns" : [
          " * if the element refers to a window, return an `hs.window` object for the element ; otherwise return nil",
          ""
        ],
        "name" : "asHSWindow",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Returns a list of all the attributes supported by the specified accessibility object.",
        "stripped_doc" : [
          "Returns a list of all the attributes supported by the specified accessibility object.",
          ""
        ],
        "def" : "hs._asm.axuielement:attributeNames() -> table",
        "doc" : "Returns a list of all the attributes supported by the specified accessibility object.\n\nParameters:\n * None\n\nReturns:\n * an array of the names of all attributes supported by the axuielementObject\n\nNotes:\n * Common attribute names can be found in the [hs._asm.axuielement.attributes](#attributes) tables; however, this method will list only those names which are supported by this object, and is not limited to just those in the referenced table.",
        "notes" : [
          " * Common attribute names can be found in the [hs._asm.axuielement.attributes](#attributes) tables; however, this method will list only those names which are supported by this object, and is not limited to just those in the referenced table."
        ],
        "signature" : "hs._asm.axuielement:attributeNames() -> table",
        "type" : "Method",
        "returns" : [
          " * an array of the names of all attributes supported by the axuielementObject",
          ""
        ],
        "name" : "attributeNames",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Returns the value of an accessibility object's attribute.",
        "stripped_doc" : [
          "Returns the value of an accessibility object's attribute.",
          ""
        ],
        "def" : "hs._asm.axuielement:attributeValue(attribute) -> value",
        "doc" : "Returns the value of an accessibility object's attribute.\n\nParameters:\n * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).\n\nReturns:\n * the current value of the attribute, or nil if the attribute has no value",
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement:attributeValue(attribute) -> value",
        "type" : "Method",
        "returns" : [
          " * the current value of the attribute, or nil if the attribute has no value"
        ],
        "name" : "attributeValue",
        "parameters" : [
          " * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).",
          ""
        ]
      },
      {
        "desc" : "Returns the count of the array of an accessibility object's attribute value.",
        "stripped_doc" : [
          "Returns the count of the array of an accessibility object's attribute value.",
          ""
        ],
        "def" : "hs._asm.axuielement:attributeValueCount(attribute) -> integer",
        "doc" : "Returns the count of the array of an accessibility object's attribute value.\n\nParameters:\n * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).\n\nReturns:\n * the number of items in the value for the attribute, if it is an array, or nil if the value is not an array.",
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement:attributeValueCount(attribute) -> integer",
        "type" : "Method",
        "returns" : [
          " * the number of items in the value for the attribute, if it is an array, or nil if the value is not an array."
        ],
        "name" : "attributeValueCount",
        "parameters" : [
          " * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).",
          ""
        ]
      },
      {
        "desc" : "Return a duplicate userdata reference to the Accessibility object.",
        "stripped_doc" : [
          "Return a duplicate userdata reference to the Accessibility object.",
          ""
        ],
        "def" : "hs._asm.axuielement:copy() -> axuielementObject",
        "doc" : "Return a duplicate userdata reference to the Accessibility object.\n\nParameters:\n * None\n\nReturns:\n * a new userdata object representing a new reference to the Accessibility object.\n\nNotes:\n * The new userdata will have no search state information attached to it, and is used internally by [hs._asm.axuielement:searchPath](#searchPath).",
        "notes" : [
          " * The new userdata will have no search state information attached to it, and is used internally by [hs._asm.axuielement:searchPath](#searchPath)."
        ],
        "signature" : "hs._asm.axuielement:copy() -> axuielementObject",
        "type" : "Method",
        "returns" : [
          " * a new userdata object representing a new reference to the Accessibility object.",
          ""
        ],
        "name" : "copy",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Returns a list of the dynamic methods (short cuts) created by this module for the object",
        "stripped_doc" : [
          "Returns a list of the dynamic methods (short cuts) created by this module for the object",
          ""
        ],
        "def" : "hs._asm.axuielement:dynamicMethods([keyValueTable]) -> table",
        "doc" : "Returns a list of the dynamic methods (short cuts) created by this module for the object\n\nParameters:\n * `keyValueTable` - an optional boolean, default false, indicating whether or not the result should be an array or a table of key-value pairs.\n\nReturns:\n * If `keyValueTable` is true, this method returns a table of key-value pairs with each key being the name of a dynamically generated method, and the value being the corresponding function.  Otherwise, this method returns an array of the dynamically generated method names.\n\nNotes:\n * the dynamically generated methods are described more fully in the reference documentation header, but basically provide shortcuts for getting and setting attribute values as well as perform actions supported by the Accessibility object the axuielementObject represents.",
        "notes" : [
          " * the dynamically generated methods are described more fully in the reference documentation header, but basically provide shortcuts for getting and setting attribute values as well as perform actions supported by the Accessibility object the axuielementObject represents."
        ],
        "signature" : "hs._asm.axuielement:dynamicMethods([keyValueTable]) -> table",
        "type" : "Method",
        "returns" : [
          " * If `keyValueTable` is true, this method returns a table of key-value pairs with each key being the name of a dynamically generated method, and the value being the corresponding function.  Otherwise, this method returns an array of the dynamically generated method names.",
          ""
        ],
        "name" : "dynamicMethods",
        "parameters" : [
          " * `keyValueTable` - an optional boolean, default false, indicating whether or not the result should be an array or a table of key-value pairs.",
          ""
        ]
      },
      {
        "desc" : "Returns the accessibility object at the specified position in top-left relative screen coordinates.",
        "stripped_doc" : [
          "Returns the accessibility object at the specified position in top-left relative screen coordinates.",
          ""
        ],
        "def" : "hs._asm.axuielement:elementAtPosition(x, y | { x, y }) -> axuielementObject",
        "doc" : "Returns the accessibility object at the specified position in top-left relative screen coordinates.\n\nParameters:\n * `x`, `y`   - the x and y coordinates of the screen location to test, provided as separate parameters\n * `{ x, y }` - the x and y coordinates of the screen location to test, provided as a point-table, like the one returned by `hs.mouse.getAbsolutePosition`.\n\nReturns:\n * an axuielementObject for the object at the specified coordinates, or nil if no object could be identified.\n\nNotes:\n * This method can only be called on an axuielementObject that represents an application or the system-wide element (see [hs._asm.axuielement.systemWideElement](#systemWideElement)).\n\n * This function does hit-testing based on window z-order (that is, layering). If one window is on top of another window, the returned accessibility object comes from whichever window is topmost at the specified location.\n * If this method is called on an axuielementObject representing an application, the search is restricted to the application.\n * If this method is called on an axuielementObject representing the system-wide element, the search is not restricted to any particular application.  See [hs._asm.axuielement.systemElementAtPosition](#systemElementAtPosition).",
        "notes" : [
          " * This method can only be called on an axuielementObject that represents an application or the system-wide element (see [hs._asm.axuielement.systemWideElement](#systemWideElement)).",
          "",
          " * This function does hit-testing based on window z-order (that is, layering). If one window is on top of another window, the returned accessibility object comes from whichever window is topmost at the specified location.",
          " * If this method is called on an axuielementObject representing an application, the search is restricted to the application.",
          " * If this method is called on an axuielementObject representing the system-wide element, the search is not restricted to any particular application.  See [hs._asm.axuielement.systemElementAtPosition](#systemElementAtPosition)."
        ],
        "signature" : "hs._asm.axuielement:elementAtPosition(x, y | { x, y }) -> axuielementObject",
        "type" : "Method",
        "returns" : [
          " * an axuielementObject for the object at the specified coordinates, or nil if no object could be identified.",
          ""
        ],
        "name" : "elementAtPosition",
        "parameters" : [
          " * `x`, `y`   - the x and y coordinates of the screen location to test, provided as separate parameters",
          " * `{ x, y }` - the x and y coordinates of the screen location to test, provided as a point-table, like the one returned by `hs.mouse.getAbsolutePosition`.",
          ""
        ]
      },
      {
        "desc" : "Returns a table of axuielementObjects that match the specified criteria.  If this method is called for an axuielementObject, it will include all children of the element in its search.  If this method is called for a table of axuielementObjects, it will return the subset of the table that match the criteria.",
        "stripped_doc" : [
          "Returns a table of axuielementObjects that match the specified criteria.  If this method is called for an axuielementObject, it will include all children of the element in its search.  If this method is called for a table of axuielementObjects, it will return the subset of the table that match the criteria.",
          ""
        ],
        "def" : "hs._asm.axuielement:elementSearch(matchCriteria, [isPattern], [includeParents]) -> table",
        "doc" : "Returns a table of axuielementObjects that match the specified criteria.  If this method is called for an axuielementObject, it will include all children of the element in its search.  If this method is called for a table of axuielementObjects, it will return the subset of the table that match the criteria.\n\nParameters:\n * `matchCriteria`  - the criteria to compare against the accessibility objects\n * `isPattern`      - an optional boolean, default false, specifying whether or not the strings in the search criteria should be considered as Lua patterns (true) or as absolute string matches (false).\n * `includeParents` - an optional boolean, default false, indicating that the parent of objects should be queried as well.  If you wish to specify this parameter, you *must* also specify the `isPattern` parameter.  This parameter is ignored if the method is called on a result set from a previous invocation of this method or [hs._asm.axuielement:getAllChildElements](#getAllChildElements).\n\nReturns:\n * a table of axuielementObjects which match the specified criteria.  The table returned will include a metatable which allows calling this method on the result table for further narrowing the search.\n\nNotes:\n * this method makes heavy use of the [hs._asm.axuielement:matches](#matches) method and pre-creates the necessary dynamic functions to optimize its search.\n\n * You can use this method to retrieve all of the current axuielementObjects for an application as follows:\n~~~\nax = require\"hs._asm.axuielement\"\nelements = ax.applicationElement(hs.application(\"Safari\")):elementSearch({})\n~~~\n * Note that if you started from the window of an application, only the children of that window would be returned; you could force it to gather all of the objects for the application by using `:elementSearch({}, false, true)`.\n * However, this method of querying for all elements can be slow -- it is highly recommended that you use [hs._asm.axuielement:getAllChildElements](#getAllChildElements) instead, and ideally with a callback function.\n~~~\nax = require\"hs._asm.axuielement\"\nax.applicationElement(hs.application(\"Safari\")):getAllChildElements(function(t)\n    elements = t\n    print(\"done with query\")\nend)\n~~~\n * Whatever option you choose, you can use this method to narrow down the result set. This example will print the frame for each button that was present in Safari when the search occurred which has a description which starts with \"min\" (e.g. \"minimize button\") or \"full\" (e.g. \"full screen button\"):\n~~~\nfor i, v in ipairs(elements:elementSearch({\n                                    role=\"AXButton\",\n                                    roleDescription = { \"^min\", \"^full\"}\n                                }, true)) do\n    print(hs.inspect(v:frame()))\nend\n~~~",
        "notes" : [
          " * this method makes heavy use of the [hs._asm.axuielement:matches](#matches) method and pre-creates the necessary dynamic functions to optimize its search.",
          "",
          " * You can use this method to retrieve all of the current axuielementObjects for an application as follows:",
          "~~~",
          "ax = require\"hs._asm.axuielement\"",
          "elements = ax.applicationElement(hs.application(\"Safari\")):elementSearch({})",
          "~~~",
          " * Note that if you started from the window of an application, only the children of that window would be returned; you could force it to gather all of the objects for the application by using `:elementSearch({}, false, true)`.",
          " * However, this method of querying for all elements can be slow -- it is highly recommended that you use [hs._asm.axuielement:getAllChildElements](#getAllChildElements) instead, and ideally with a callback function.",
          "~~~",
          "ax = require\"hs._asm.axuielement\"",
          "ax.applicationElement(hs.application(\"Safari\")):getAllChildElements(function(t)",
          "    elements = t",
          "    print(\"done with query\")",
          "end)",
          "~~~",
          " * Whatever option you choose, you can use this method to narrow down the result set. This example will print the frame for each button that was present in Safari when the search occurred which has a description which starts with \"min\" (e.g. \"minimize button\") or \"full\" (e.g. \"full screen button\"):",
          "~~~",
          "for i, v in ipairs(elements:elementSearch({",
          "                                    role=\"AXButton\",",
          "                                    roleDescription = { \"^min\", \"^full\"}",
          "                                }, true)) do",
          "    print(hs.inspect(v:frame()))",
          "end",
          "~~~"
        ],
        "signature" : "hs._asm.axuielement:elementSearch(matchCriteria, [isPattern], [includeParents]) -> table",
        "type" : "Method",
        "returns" : [
          " * a table of axuielementObjects which match the specified criteria.  The table returned will include a metatable which allows calling this method on the result table for further narrowing the search.",
          ""
        ],
        "name" : "elementSearch",
        "parameters" : [
          " * `matchCriteria`  - the criteria to compare against the accessibility objects",
          " * `isPattern`      - an optional boolean, default false, specifying whether or not the strings in the search criteria should be considered as Lua patterns (true) or as absolute string matches (false).",
          " * `includeParents` - an optional boolean, default false, indicating that the parent of objects should be queried as well.  If you wish to specify this parameter, you *must* also specify the `isPattern` parameter.  This parameter is ignored if the method is called on a result set from a previous invocation of this method or [hs._asm.axuielement:getAllChildElements](#getAllChildElements).",
          ""
        ]
      },
      {
        "desc" : "Query the accessibility object for all child objects (and their children...) and return them in a table.",
        "stripped_doc" : [
          "Query the accessibility object for all child objects (and their children...) and return them in a table.",
          "",
          "Paramters:",
          " * `parent`   - an optional boolean, default false, indicating that the parent of objects should be queried as well.",
          " * `callback` - an optional function callback which will receive the results of the query.  If a function is provided, the query will be performed in a background thread, and this method will return immediately.",
          ""
        ],
        "def" : "hs._asm.axuielement:getAllChildElements([parent], [callback]) -> table | axuielementObject",
        "doc" : "Query the accessibility object for all child objects (and their children...) and return them in a table.\n\nParamters:\n * `parent`   - an optional boolean, default false, indicating that the parent of objects should be queried as well.\n * `callback` - an optional function callback which will receive the results of the query.  If a function is provided, the query will be performed in a background thread, and this method will return immediately.\n\nReturns:\n * If no function callback is provided, this method will return a table containing this element, and all of the children (and optionally parents) of this element.  If a function callback is provided, this method returns the axuielementObject.\n\nNotes:\n * The table generated, either as the return value, or as the argument to the callback function, has the `hs._asm.axuielement.elementSearchTable` metatable assigned to it. See [hs._asm.axuielement:elementSearch](#elementSearch) for details on what this provides.\n\n * If `parent` is true, this method in effect provides all available accessibility objects for the application the object belongs to (or the focused application, if using the system-wide object).\n\n * If you do not provide a callback function, this method blocks Hammerspoon while it performs the query; such use is not recommended, especially if you set `parent` to true, as it can block for some time.",
        "notes" : [
          " * The table generated, either as the return value, or as the argument to the callback function, has the `hs._asm.axuielement.elementSearchTable` metatable assigned to it. See [hs._asm.axuielement:elementSearch](#elementSearch) for details on what this provides.",
          "",
          " * If `parent` is true, this method in effect provides all available accessibility objects for the application the object belongs to (or the focused application, if using the system-wide object).",
          "",
          " * If you do not provide a callback function, this method blocks Hammerspoon while it performs the query; such use is not recommended, especially if you set `parent` to true, as it can block for some time."
        ],
        "signature" : "hs._asm.axuielement:getAllChildElements([parent], [callback]) -> table | axuielementObject",
        "type" : "Method",
        "returns" : [
          " * If no function callback is provided, this method will return a table containing this element, and all of the children (and optionally parents) of this element.  If a function callback is provided, this method returns the axuielementObject.",
          ""
        ],
        "name" : "getAllChildElements",
        "parameters" : [

        ]
      },
      {
        "desc" : "Returns whether the specified accessibility object's attribute can be modified.",
        "stripped_doc" : [
          "Returns whether the specified accessibility object's attribute can be modified.",
          ""
        ],
        "def" : "hs._asm.axuielement:isAttributeSettable(attribute) -> boolean",
        "doc" : "Returns whether the specified accessibility object's attribute can be modified.\n\nParameters:\n * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).\n\nReturns:\n * a boolean value indicating whether or not the value of the parameter can be modified.",
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement:isAttributeSettable(attribute) -> boolean",
        "type" : "Method",
        "returns" : [
          " * a boolean value indicating whether or not the value of the parameter can be modified."
        ],
        "name" : "isAttributeSettable",
        "parameters" : [
          " * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).",
          ""
        ]
      },
      {
        "desc" : "Returns whether the specified accessibility object is still valid.",
        "stripped_doc" : [
          "Returns whether the specified accessibility object is still valid.",
          ""
        ],
        "def" : "hs._asm.axuielement:isValid() -> boolean",
        "doc" : "Returns whether the specified accessibility object is still valid.\n\nParameters:\n * None\n\nReturns:\n * a boolean value indicating whether or not the accessibility object is still valid.",
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement:isValid() -> boolean",
        "type" : "Method",
        "returns" : [
          " * a boolean value indicating whether or not the accessibility object is still valid."
        ],
        "name" : "isValid",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Returns true if the axuielementObject matches the specified criteria or false if it does not.",
        "stripped_doc" : [
          "Returns true if the axuielementObject matches the specified criteria or false if it does not.",
          "",
          "Paramters:",
          " * `matchCriteria` - the criteria to compare against the accessibility object",
          " * `isPattern`     - an optional boolean, default false, specifying whether or not the strings in the search criteria should be considered as Lua patterns (true) or as absolute string matches (false).",
          ""
        ],
        "def" : "hs._asm.axuielement:matches(matchCriteria, [isPattern]) -> boolean",
        "doc" : "Returns true if the axuielementObject matches the specified criteria or false if it does not.\n\nParamters:\n * `matchCriteria` - the criteria to compare against the accessibility object\n * `isPattern`     - an optional boolean, default false, specifying whether or not the strings in the search criteria should be considered as Lua patterns (true) or as absolute string matches (false).\n\nReturns:\n * true if the axuielementObject matches the criteria, false if it does not.\n\nNotes:\n * if `isPattern` is specified and is true, all string comparisons are done with `string.match`.  See the Lua manual, section 6.4.1 (`help.lua._man._6_4_1` in the Hammerspoon console).\n * the `matchCriteria` must be one of the following:\n   * a single string, specifying the AXRole value the axuielementObject's AXRole attribute must equal for the match to return true\n   * an array of strings, specifying a list of AXRoles for which the match should return true\n   * a table of key-value pairs specifying a more complex match criteria.  This table will be evaluated as follows:\n     * each key-value pair is treated as a separate test and the object *must* match as true for all tests\n     * each key is a string specifying an attribute to evaluate.  This attribute may be specified with its formal name (e.g. \"AXRole\") or the informal version (e.g. \"role\" or \"Role\").\n     * each value may be a string, a number, a boolean, or an axuielementObject userdata object, or an array (table) of such.  If the value is an array, then the test will match as true if the object matches any of the supplied values for the attribute specified by the key.\n       * Put another way: key-value pairs are \"and'ed\" together while the values for a specific key-value pair are \"or'ed\" together.\n\n * This method is used by [hs._asm.axuielement:elementSearch](#elementSearch) to determine if the given object should be included it's result set.  As an optimization for the `elementSearch` method, the keys in the `matchCriteria` table may be provided as a function which takes one argument (the axuielementObject to query).  The return value of this function will be compared against the value(s) of the key-value pair as described above.  This is done to prevent dynamically re-creating the query for each comparison when the search set is large.",
        "notes" : [
          " * if `isPattern` is specified and is true, all string comparisons are done with `string.match`.  See the Lua manual, section 6.4.1 (`help.lua._man._6_4_1` in the Hammerspoon console).",
          " * the `matchCriteria` must be one of the following:",
          "   * a single string, specifying the AXRole value the axuielementObject's AXRole attribute must equal for the match to return true",
          "   * an array of strings, specifying a list of AXRoles for which the match should return true",
          "   * a table of key-value pairs specifying a more complex match criteria.  This table will be evaluated as follows:",
          "     * each key-value pair is treated as a separate test and the object *must* match as true for all tests",
          "     * each key is a string specifying an attribute to evaluate.  This attribute may be specified with its formal name (e.g. \"AXRole\") or the informal version (e.g. \"role\" or \"Role\").",
          "     * each value may be a string, a number, a boolean, or an axuielementObject userdata object, or an array (table) of such.  If the value is an array, then the test will match as true if the object matches any of the supplied values for the attribute specified by the key.",
          "       * Put another way: key-value pairs are \"and'ed\" together while the values for a specific key-value pair are \"or'ed\" together.",
          "",
          " * This method is used by [hs._asm.axuielement:elementSearch](#elementSearch) to determine if the given object should be included it's result set.  As an optimization for the `elementSearch` method, the keys in the `matchCriteria` table may be provided as a function which takes one argument (the axuielementObject to query).  The return value of this function will be compared against the value(s) of the key-value pair as described above.  This is done to prevent dynamically re-creating the query for each comparison when the search set is large."
        ],
        "signature" : "hs._asm.axuielement:matches(matchCriteria, [isPattern]) -> boolean",
        "type" : "Method",
        "returns" : [
          " * true if the axuielementObject matches the criteria, false if it does not.",
          ""
        ],
        "name" : "matches",
        "parameters" : [

        ]
      },
      {
        "desc" : "Returns a list of all the parameterized attributes supported by the specified accessibility object.",
        "stripped_doc" : [
          "Returns a list of all the parameterized attributes supported by the specified accessibility object.",
          ""
        ],
        "def" : "hs._asm.axuielement:parameterizedAttributeNames() -> table",
        "doc" : "Returns a list of all the parameterized attributes supported by the specified accessibility object.\n\nParameters:\n * None\n\nReturns:\n * an array of the names of all parameterized attributes supported by the axuielementObject",
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement:parameterizedAttributeNames() -> table",
        "type" : "Method",
        "returns" : [
          " * an array of the names of all parameterized attributes supported by the axuielementObject"
        ],
        "name" : "parameterizedAttributeNames",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Returns the value of an accessibility object's parameterized attribute.",
        "stripped_doc" : [
          "Returns the value of an accessibility object's parameterized attribute.",
          ""
        ],
        "def" : "hs._asm.axuielement:parameterizedAttributeValue(attribute, parameter) -> value",
        "doc" : "Returns the value of an accessibility object's parameterized attribute.\n\nParameters:\n * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:parameterizedAttributeNames](#parameterizedAttributeNames).\n * `parameter` - the parameter\n\nReturns:\n * the current value of the parameterized attribute, or nil if it has no value\n\nNotes:\n * Parameterized attribute support is still considered experimental and not fully supported yet.  Use with caution.",
        "notes" : [
          " * Parameterized attribute support is still considered experimental and not fully supported yet.  Use with caution."
        ],
        "signature" : "hs._asm.axuielement:parameterizedAttributeValue(attribute, parameter) -> value",
        "type" : "Method",
        "returns" : [
          " * the current value of the parameterized attribute, or nil if it has no value",
          ""
        ],
        "name" : "parameterizedAttributeValue",
        "parameters" : [
          " * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:parameterizedAttributeNames](#parameterizedAttributeNames).",
          " * `parameter` - the parameter",
          ""
        ]
      },
      {
        "desc" : "Requests that the specified accessibility object perform the specified action.",
        "stripped_doc" : [
          "Requests that the specified accessibility object perform the specified action.",
          ""
        ],
        "def" : "hs._asm.axuielement:performAction(action) -> axuielement | false | nil",
        "doc" : "Requests that the specified accessibility object perform the specified action.\n\nParameters:\n * `action` - the name of the action, as specified by [hs._asm.axuielement:actionNames](#actionNames).\n\nReturns:\n * if the requested action was accepted by the target, returns the axuielementObject; if the requested action was rejected, returns false, otherwise returns nil on error.\n\nNotes:\n * The return value only suggests success or failure, but is not a guarantee.  The receiving application may have internal logic which prevents the action from occurring at this time for some reason, even though this method returns success (the axuielementObject).  Contrawise, the requested action may trigger a requirement for a response from the user and thus appear to time out, causing this method to return false or nil.",
        "notes" : [
          " * The return value only suggests success or failure, but is not a guarantee.  The receiving application may have internal logic which prevents the action from occurring at this time for some reason, even though this method returns success (the axuielementObject).  Contrawise, the requested action may trigger a requirement for a response from the user and thus appear to time out, causing this method to return false or nil."
        ],
        "signature" : "hs._asm.axuielement:performAction(action) -> axuielement | false | nil",
        "type" : "Method",
        "returns" : [
          " * if the requested action was accepted by the target, returns the axuielementObject; if the requested action was rejected, returns false, otherwise returns nil on error.",
          ""
        ],
        "name" : "performAction",
        "parameters" : [
          " * `action` - the name of the action, as specified by [hs._asm.axuielement:actionNames](#actionNames).",
          ""
        ]
      },
      {
        "desc" : "Returns the process ID associated with the specified accessibility object.",
        "stripped_doc" : [
          "Returns the process ID associated with the specified accessibility object.",
          ""
        ],
        "def" : "hs._asm.axuielement:pid() -> integer",
        "doc" : "Returns the process ID associated with the specified accessibility object.\n\nParameters:\n * None\n\nReturns:\n * the process ID for the application to which the accessibility object ultimately belongs.",
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement:pid() -> integer",
        "type" : "Method",
        "returns" : [
          " * the process ID for the application to which the accessibility object ultimately belongs."
        ],
        "name" : "pid",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Sets the accessibility object's attribute to the specified value.",
        "stripped_doc" : [
          "Sets the accessibility object's attribute to the specified value.",
          ""
        ],
        "def" : "hs._asm.axuielement:setAttributeValue(attribute, value) -> axuielementObject | nil",
        "doc" : "Sets the accessibility object's attribute to the specified value.\n\nParameters:\n * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).\n * `value`     - the value to assign to the attribute\n\nReturns:\n * the axuielementObject on success; nil if the attribute could not be set.\n\nNotes:\n * This is still somewhat experimental and needs more testing; use with caution.",
        "notes" : [
          " * This is still somewhat experimental and needs more testing; use with caution."
        ],
        "signature" : "hs._asm.axuielement:setAttributeValue(attribute, value) -> axuielementObject | nil",
        "type" : "Method",
        "returns" : [
          " * the axuielementObject on success; nil if the attribute could not be set.",
          ""
        ],
        "name" : "setAttributeValue",
        "parameters" : [
          " * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).",
          " * `value`     - the value to assign to the attribute",
          ""
        ]
      }
    ],
    "Method" : [
      {
        "desc" : "Returns a list of the dynamic methods (short cuts) created by this module for the object",
        "stripped_doc" : [
          "Returns a list of the dynamic methods (short cuts) created by this module for the object",
          ""
        ],
        "def" : "hs._asm.axuielement:dynamicMethods([keyValueTable]) -> table",
        "doc" : "Returns a list of the dynamic methods (short cuts) created by this module for the object\n\nParameters:\n * `keyValueTable` - an optional boolean, default false, indicating whether or not the result should be an array or a table of key-value pairs.\n\nReturns:\n * If `keyValueTable` is true, this method returns a table of key-value pairs with each key being the name of a dynamically generated method, and the value being the corresponding function.  Otherwise, this method returns an array of the dynamically generated method names.\n\nNotes:\n * the dynamically generated methods are described more fully in the reference documentation header, but basically provide shortcuts for getting and setting attribute values as well as perform actions supported by the Accessibility object the axuielementObject represents.",
        "notes" : [
          " * the dynamically generated methods are described more fully in the reference documentation header, but basically provide shortcuts for getting and setting attribute values as well as perform actions supported by the Accessibility object the axuielementObject represents."
        ],
        "signature" : "hs._asm.axuielement:dynamicMethods([keyValueTable]) -> table",
        "type" : "Method",
        "returns" : [
          " * If `keyValueTable` is true, this method returns a table of key-value pairs with each key being the name of a dynamically generated method, and the value being the corresponding function.  Otherwise, this method returns an array of the dynamically generated method names.",
          ""
        ],
        "name" : "dynamicMethods",
        "parameters" : [
          " * `keyValueTable` - an optional boolean, default false, indicating whether or not the result should be an array or a table of key-value pairs.",
          ""
        ]
      },
      {
        "desc" : "Returns true if the axuielementObject matches the specified criteria or false if it does not.",
        "stripped_doc" : [
          "Returns true if the axuielementObject matches the specified criteria or false if it does not.",
          "",
          "Paramters:",
          " * `matchCriteria` - the criteria to compare against the accessibility object",
          " * `isPattern`     - an optional boolean, default false, specifying whether or not the strings in the search criteria should be considered as Lua patterns (true) or as absolute string matches (false).",
          ""
        ],
        "def" : "hs._asm.axuielement:matches(matchCriteria, [isPattern]) -> boolean",
        "doc" : "Returns true if the axuielementObject matches the specified criteria or false if it does not.\n\nParamters:\n * `matchCriteria` - the criteria to compare against the accessibility object\n * `isPattern`     - an optional boolean, default false, specifying whether or not the strings in the search criteria should be considered as Lua patterns (true) or as absolute string matches (false).\n\nReturns:\n * true if the axuielementObject matches the criteria, false if it does not.\n\nNotes:\n * if `isPattern` is specified and is true, all string comparisons are done with `string.match`.  See the Lua manual, section 6.4.1 (`help.lua._man._6_4_1` in the Hammerspoon console).\n * the `matchCriteria` must be one of the following:\n   * a single string, specifying the AXRole value the axuielementObject's AXRole attribute must equal for the match to return true\n   * an array of strings, specifying a list of AXRoles for which the match should return true\n   * a table of key-value pairs specifying a more complex match criteria.  This table will be evaluated as follows:\n     * each key-value pair is treated as a separate test and the object *must* match as true for all tests\n     * each key is a string specifying an attribute to evaluate.  This attribute may be specified with its formal name (e.g. \"AXRole\") or the informal version (e.g. \"role\" or \"Role\").\n     * each value may be a string, a number, a boolean, or an axuielementObject userdata object, or an array (table) of such.  If the value is an array, then the test will match as true if the object matches any of the supplied values for the attribute specified by the key.\n       * Put another way: key-value pairs are \"and'ed\" together while the values for a specific key-value pair are \"or'ed\" together.\n\n * This method is used by [hs._asm.axuielement:elementSearch](#elementSearch) to determine if the given object should be included it's result set.  As an optimization for the `elementSearch` method, the keys in the `matchCriteria` table may be provided as a function which takes one argument (the axuielementObject to query).  The return value of this function will be compared against the value(s) of the key-value pair as described above.  This is done to prevent dynamically re-creating the query for each comparison when the search set is large.",
        "notes" : [
          " * if `isPattern` is specified and is true, all string comparisons are done with `string.match`.  See the Lua manual, section 6.4.1 (`help.lua._man._6_4_1` in the Hammerspoon console).",
          " * the `matchCriteria` must be one of the following:",
          "   * a single string, specifying the AXRole value the axuielementObject's AXRole attribute must equal for the match to return true",
          "   * an array of strings, specifying a list of AXRoles for which the match should return true",
          "   * a table of key-value pairs specifying a more complex match criteria.  This table will be evaluated as follows:",
          "     * each key-value pair is treated as a separate test and the object *must* match as true for all tests",
          "     * each key is a string specifying an attribute to evaluate.  This attribute may be specified with its formal name (e.g. \"AXRole\") or the informal version (e.g. \"role\" or \"Role\").",
          "     * each value may be a string, a number, a boolean, or an axuielementObject userdata object, or an array (table) of such.  If the value is an array, then the test will match as true if the object matches any of the supplied values for the attribute specified by the key.",
          "       * Put another way: key-value pairs are \"and'ed\" together while the values for a specific key-value pair are \"or'ed\" together.",
          "",
          " * This method is used by [hs._asm.axuielement:elementSearch](#elementSearch) to determine if the given object should be included it's result set.  As an optimization for the `elementSearch` method, the keys in the `matchCriteria` table may be provided as a function which takes one argument (the axuielementObject to query).  The return value of this function will be compared against the value(s) of the key-value pair as described above.  This is done to prevent dynamically re-creating the query for each comparison when the search set is large."
        ],
        "signature" : "hs._asm.axuielement:matches(matchCriteria, [isPattern]) -> boolean",
        "type" : "Method",
        "returns" : [
          " * true if the axuielementObject matches the criteria, false if it does not.",
          ""
        ],
        "name" : "matches",
        "parameters" : [

        ]
      },
      {
        "desc" : "Returns a table of axuielementObjects that match the specified criteria.  If this method is called for an axuielementObject, it will include all children of the element in its search.  If this method is called for a table of axuielementObjects, it will return the subset of the table that match the criteria.",
        "stripped_doc" : [
          "Returns a table of axuielementObjects that match the specified criteria.  If this method is called for an axuielementObject, it will include all children of the element in its search.  If this method is called for a table of axuielementObjects, it will return the subset of the table that match the criteria.",
          ""
        ],
        "def" : "hs._asm.axuielement:elementSearch(matchCriteria, [isPattern], [includeParents]) -> table",
        "doc" : "Returns a table of axuielementObjects that match the specified criteria.  If this method is called for an axuielementObject, it will include all children of the element in its search.  If this method is called for a table of axuielementObjects, it will return the subset of the table that match the criteria.\n\nParameters:\n * `matchCriteria`  - the criteria to compare against the accessibility objects\n * `isPattern`      - an optional boolean, default false, specifying whether or not the strings in the search criteria should be considered as Lua patterns (true) or as absolute string matches (false).\n * `includeParents` - an optional boolean, default false, indicating that the parent of objects should be queried as well.  If you wish to specify this parameter, you *must* also specify the `isPattern` parameter.  This parameter is ignored if the method is called on a result set from a previous invocation of this method or [hs._asm.axuielement:getAllChildElements](#getAllChildElements).\n\nReturns:\n * a table of axuielementObjects which match the specified criteria.  The table returned will include a metatable which allows calling this method on the result table for further narrowing the search.\n\nNotes:\n * this method makes heavy use of the [hs._asm.axuielement:matches](#matches) method and pre-creates the necessary dynamic functions to optimize its search.\n\n * You can use this method to retrieve all of the current axuielementObjects for an application as follows:\n~~~\nax = require\"hs._asm.axuielement\"\nelements = ax.applicationElement(hs.application(\"Safari\")):elementSearch({})\n~~~\n * Note that if you started from the window of an application, only the children of that window would be returned; you could force it to gather all of the objects for the application by using `:elementSearch({}, false, true)`.\n * However, this method of querying for all elements can be slow -- it is highly recommended that you use [hs._asm.axuielement:getAllChildElements](#getAllChildElements) instead, and ideally with a callback function.\n~~~\nax = require\"hs._asm.axuielement\"\nax.applicationElement(hs.application(\"Safari\")):getAllChildElements(function(t)\n    elements = t\n    print(\"done with query\")\nend)\n~~~\n * Whatever option you choose, you can use this method to narrow down the result set. This example will print the frame for each button that was present in Safari when the search occurred which has a description which starts with \"min\" (e.g. \"minimize button\") or \"full\" (e.g. \"full screen button\"):\n~~~\nfor i, v in ipairs(elements:elementSearch({\n                                    role=\"AXButton\",\n                                    roleDescription = { \"^min\", \"^full\"}\n                                }, true)) do\n    print(hs.inspect(v:frame()))\nend\n~~~",
        "notes" : [
          " * this method makes heavy use of the [hs._asm.axuielement:matches](#matches) method and pre-creates the necessary dynamic functions to optimize its search.",
          "",
          " * You can use this method to retrieve all of the current axuielementObjects for an application as follows:",
          "~~~",
          "ax = require\"hs._asm.axuielement\"",
          "elements = ax.applicationElement(hs.application(\"Safari\")):elementSearch({})",
          "~~~",
          " * Note that if you started from the window of an application, only the children of that window would be returned; you could force it to gather all of the objects for the application by using `:elementSearch({}, false, true)`.",
          " * However, this method of querying for all elements can be slow -- it is highly recommended that you use [hs._asm.axuielement:getAllChildElements](#getAllChildElements) instead, and ideally with a callback function.",
          "~~~",
          "ax = require\"hs._asm.axuielement\"",
          "ax.applicationElement(hs.application(\"Safari\")):getAllChildElements(function(t)",
          "    elements = t",
          "    print(\"done with query\")",
          "end)",
          "~~~",
          " * Whatever option you choose, you can use this method to narrow down the result set. This example will print the frame for each button that was present in Safari when the search occurred which has a description which starts with \"min\" (e.g. \"minimize button\") or \"full\" (e.g. \"full screen button\"):",
          "~~~",
          "for i, v in ipairs(elements:elementSearch({",
          "                                    role=\"AXButton\",",
          "                                    roleDescription = { \"^min\", \"^full\"}",
          "                                }, true)) do",
          "    print(hs.inspect(v:frame()))",
          "end",
          "~~~"
        ],
        "signature" : "hs._asm.axuielement:elementSearch(matchCriteria, [isPattern], [includeParents]) -> table",
        "type" : "Method",
        "returns" : [
          " * a table of axuielementObjects which match the specified criteria.  The table returned will include a metatable which allows calling this method on the result table for further narrowing the search.",
          ""
        ],
        "name" : "elementSearch",
        "parameters" : [
          " * `matchCriteria`  - the criteria to compare against the accessibility objects",
          " * `isPattern`      - an optional boolean, default false, specifying whether or not the strings in the search criteria should be considered as Lua patterns (true) or as absolute string matches (false).",
          " * `includeParents` - an optional boolean, default false, indicating that the parent of objects should be queried as well.  If you wish to specify this parameter, you *must* also specify the `isPattern` parameter.  This parameter is ignored if the method is called on a result set from a previous invocation of this method or [hs._asm.axuielement:getAllChildElements](#getAllChildElements).",
          ""
        ]
      },
      {
        "desc" : "Return a duplicate userdata reference to the Accessibility object.",
        "stripped_doc" : [
          "Return a duplicate userdata reference to the Accessibility object.",
          ""
        ],
        "def" : "hs._asm.axuielement:copy() -> axuielementObject",
        "doc" : "Return a duplicate userdata reference to the Accessibility object.\n\nParameters:\n * None\n\nReturns:\n * a new userdata object representing a new reference to the Accessibility object.\n\nNotes:\n * The new userdata will have no search state information attached to it, and is used internally by [hs._asm.axuielement:searchPath](#searchPath).",
        "notes" : [
          " * The new userdata will have no search state information attached to it, and is used internally by [hs._asm.axuielement:searchPath](#searchPath)."
        ],
        "signature" : "hs._asm.axuielement:copy() -> axuielementObject",
        "type" : "Method",
        "returns" : [
          " * a new userdata object representing a new reference to the Accessibility object.",
          ""
        ],
        "name" : "copy",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Returns a list of all the attributes supported by the specified accessibility object.",
        "stripped_doc" : [
          "Returns a list of all the attributes supported by the specified accessibility object.",
          ""
        ],
        "def" : "hs._asm.axuielement:attributeNames() -> table",
        "doc" : "Returns a list of all the attributes supported by the specified accessibility object.\n\nParameters:\n * None\n\nReturns:\n * an array of the names of all attributes supported by the axuielementObject\n\nNotes:\n * Common attribute names can be found in the [hs._asm.axuielement.attributes](#attributes) tables; however, this method will list only those names which are supported by this object, and is not limited to just those in the referenced table.",
        "notes" : [
          " * Common attribute names can be found in the [hs._asm.axuielement.attributes](#attributes) tables; however, this method will list only those names which are supported by this object, and is not limited to just those in the referenced table."
        ],
        "signature" : "hs._asm.axuielement:attributeNames() -> table",
        "type" : "Method",
        "returns" : [
          " * an array of the names of all attributes supported by the axuielementObject",
          ""
        ],
        "name" : "attributeNames",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Returns a list of all the actions the specified accessibility object can perform.",
        "stripped_doc" : [
          "Returns a list of all the actions the specified accessibility object can perform.",
          ""
        ],
        "def" : "hs._asm.axuielement:actionNames() -> table",
        "doc" : "Returns a list of all the actions the specified accessibility object can perform.\n\nParameters:\n * None\n\nReturns:\n * an array of the names of all actions supported by the axuielementObject\n\nNotes:\n * Common action names can be found in the [hs._asm.axuielement.actions](#actions) table; however, this method will list only those names which are supported by this object, and is not limited to just those in the referenced table.",
        "notes" : [
          " * Common action names can be found in the [hs._asm.axuielement.actions](#actions) table; however, this method will list only those names which are supported by this object, and is not limited to just those in the referenced table."
        ],
        "signature" : "hs._asm.axuielement:actionNames() -> table",
        "type" : "Method",
        "returns" : [
          " * an array of the names of all actions supported by the axuielementObject",
          ""
        ],
        "name" : "actionNames",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Returns a localized description of the specified accessibility object's action.",
        "stripped_doc" : [
          "Returns a localized description of the specified accessibility object's action.",
          ""
        ],
        "def" : "hs._asm.axuielement:actionDescription(action) -> string",
        "doc" : "Returns a localized description of the specified accessibility object's action.\n\nParameters:\n * `action` - the name of the action, as specified by [hs._asm.axuielement:actionNames](#actionNames).\n\nReturns:\n * a string containing a description of the object's action\n\nNotes:\n * The action descriptions are provided by the target application; as such their accuracy and usefulness rely on the target application's developers.",
        "notes" : [
          " * The action descriptions are provided by the target application; as such their accuracy and usefulness rely on the target application's developers."
        ],
        "signature" : "hs._asm.axuielement:actionDescription(action) -> string",
        "type" : "Method",
        "returns" : [
          " * a string containing a description of the object's action",
          ""
        ],
        "name" : "actionDescription",
        "parameters" : [
          " * `action` - the name of the action, as specified by [hs._asm.axuielement:actionNames](#actionNames).",
          ""
        ]
      },
      {
        "desc" : "Returns the value of an accessibility object's attribute.",
        "stripped_doc" : [
          "Returns the value of an accessibility object's attribute.",
          ""
        ],
        "def" : "hs._asm.axuielement:attributeValue(attribute) -> value",
        "doc" : "Returns the value of an accessibility object's attribute.\n\nParameters:\n * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).\n\nReturns:\n * the current value of the attribute, or nil if the attribute has no value",
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement:attributeValue(attribute) -> value",
        "type" : "Method",
        "returns" : [
          " * the current value of the attribute, or nil if the attribute has no value"
        ],
        "name" : "attributeValue",
        "parameters" : [
          " * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).",
          ""
        ]
      },
      {
        "desc" : "Returns a table containing key-value pairs for all attributes of the accessibility object.",
        "stripped_doc" : [
          "Returns a table containing key-value pairs for all attributes of the accessibility object.",
          ""
        ],
        "def" : "hs._asm.axuielement:allAttributeValues([includeErrors]) -> table",
        "doc" : "Returns a table containing key-value pairs for all attributes of the accessibility object.\n\nParameters:\n * `includeErrors` - an optional boolean, default false, that specifies whether attribute names which generate an error when retrieved are included in the returned results.\n\nReturns:\n * a table with key-value pairs corresponding to the attributes of the accessibility object.",
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement:allAttributeValues([includeErrors]) -> table",
        "type" : "Method",
        "returns" : [
          " * a table with key-value pairs corresponding to the attributes of the accessibility object."
        ],
        "name" : "allAttributeValues",
        "parameters" : [
          " * `includeErrors` - an optional boolean, default false, that specifies whether attribute names which generate an error when retrieved are included in the returned results.",
          ""
        ]
      },
      {
        "desc" : "Returns the count of the array of an accessibility object's attribute value.",
        "stripped_doc" : [
          "Returns the count of the array of an accessibility object's attribute value.",
          ""
        ],
        "def" : "hs._asm.axuielement:attributeValueCount(attribute) -> integer",
        "doc" : "Returns the count of the array of an accessibility object's attribute value.\n\nParameters:\n * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).\n\nReturns:\n * the number of items in the value for the attribute, if it is an array, or nil if the value is not an array.",
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement:attributeValueCount(attribute) -> integer",
        "type" : "Method",
        "returns" : [
          " * the number of items in the value for the attribute, if it is an array, or nil if the value is not an array."
        ],
        "name" : "attributeValueCount",
        "parameters" : [
          " * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).",
          ""
        ]
      },
      {
        "desc" : "Returns a list of all the parameterized attributes supported by the specified accessibility object.",
        "stripped_doc" : [
          "Returns a list of all the parameterized attributes supported by the specified accessibility object.",
          ""
        ],
        "def" : "hs._asm.axuielement:parameterizedAttributeNames() -> table",
        "doc" : "Returns a list of all the parameterized attributes supported by the specified accessibility object.\n\nParameters:\n * None\n\nReturns:\n * an array of the names of all parameterized attributes supported by the axuielementObject",
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement:parameterizedAttributeNames() -> table",
        "type" : "Method",
        "returns" : [
          " * an array of the names of all parameterized attributes supported by the axuielementObject"
        ],
        "name" : "parameterizedAttributeNames",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Returns whether the specified accessibility object's attribute can be modified.",
        "stripped_doc" : [
          "Returns whether the specified accessibility object's attribute can be modified.",
          ""
        ],
        "def" : "hs._asm.axuielement:isAttributeSettable(attribute) -> boolean",
        "doc" : "Returns whether the specified accessibility object's attribute can be modified.\n\nParameters:\n * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).\n\nReturns:\n * a boolean value indicating whether or not the value of the parameter can be modified.",
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement:isAttributeSettable(attribute) -> boolean",
        "type" : "Method",
        "returns" : [
          " * a boolean value indicating whether or not the value of the parameter can be modified."
        ],
        "name" : "isAttributeSettable",
        "parameters" : [
          " * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).",
          ""
        ]
      },
      {
        "desc" : "Returns whether the specified accessibility object is still valid.",
        "stripped_doc" : [
          "Returns whether the specified accessibility object is still valid.",
          ""
        ],
        "def" : "hs._asm.axuielement:isValid() -> boolean",
        "doc" : "Returns whether the specified accessibility object is still valid.\n\nParameters:\n * None\n\nReturns:\n * a boolean value indicating whether or not the accessibility object is still valid.",
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement:isValid() -> boolean",
        "type" : "Method",
        "returns" : [
          " * a boolean value indicating whether or not the accessibility object is still valid."
        ],
        "name" : "isValid",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Returns the process ID associated with the specified accessibility object.",
        "stripped_doc" : [
          "Returns the process ID associated with the specified accessibility object.",
          ""
        ],
        "def" : "hs._asm.axuielement:pid() -> integer",
        "doc" : "Returns the process ID associated with the specified accessibility object.\n\nParameters:\n * None\n\nReturns:\n * the process ID for the application to which the accessibility object ultimately belongs.",
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement:pid() -> integer",
        "type" : "Method",
        "returns" : [
          " * the process ID for the application to which the accessibility object ultimately belongs."
        ],
        "name" : "pid",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Requests that the specified accessibility object perform the specified action.",
        "stripped_doc" : [
          "Requests that the specified accessibility object perform the specified action.",
          ""
        ],
        "def" : "hs._asm.axuielement:performAction(action) -> axuielement | false | nil",
        "doc" : "Requests that the specified accessibility object perform the specified action.\n\nParameters:\n * `action` - the name of the action, as specified by [hs._asm.axuielement:actionNames](#actionNames).\n\nReturns:\n * if the requested action was accepted by the target, returns the axuielementObject; if the requested action was rejected, returns false, otherwise returns nil on error.\n\nNotes:\n * The return value only suggests success or failure, but is not a guarantee.  The receiving application may have internal logic which prevents the action from occurring at this time for some reason, even though this method returns success (the axuielementObject).  Contrawise, the requested action may trigger a requirement for a response from the user and thus appear to time out, causing this method to return false or nil.",
        "notes" : [
          " * The return value only suggests success or failure, but is not a guarantee.  The receiving application may have internal logic which prevents the action from occurring at this time for some reason, even though this method returns success (the axuielementObject).  Contrawise, the requested action may trigger a requirement for a response from the user and thus appear to time out, causing this method to return false or nil."
        ],
        "signature" : "hs._asm.axuielement:performAction(action) -> axuielement | false | nil",
        "type" : "Method",
        "returns" : [
          " * if the requested action was accepted by the target, returns the axuielementObject; if the requested action was rejected, returns false, otherwise returns nil on error.",
          ""
        ],
        "name" : "performAction",
        "parameters" : [
          " * `action` - the name of the action, as specified by [hs._asm.axuielement:actionNames](#actionNames).",
          ""
        ]
      },
      {
        "desc" : "Returns the accessibility object at the specified position in top-left relative screen coordinates.",
        "stripped_doc" : [
          "Returns the accessibility object at the specified position in top-left relative screen coordinates.",
          ""
        ],
        "def" : "hs._asm.axuielement:elementAtPosition(x, y | { x, y }) -> axuielementObject",
        "doc" : "Returns the accessibility object at the specified position in top-left relative screen coordinates.\n\nParameters:\n * `x`, `y`   - the x and y coordinates of the screen location to test, provided as separate parameters\n * `{ x, y }` - the x and y coordinates of the screen location to test, provided as a point-table, like the one returned by `hs.mouse.getAbsolutePosition`.\n\nReturns:\n * an axuielementObject for the object at the specified coordinates, or nil if no object could be identified.\n\nNotes:\n * This method can only be called on an axuielementObject that represents an application or the system-wide element (see [hs._asm.axuielement.systemWideElement](#systemWideElement)).\n\n * This function does hit-testing based on window z-order (that is, layering). If one window is on top of another window, the returned accessibility object comes from whichever window is topmost at the specified location.\n * If this method is called on an axuielementObject representing an application, the search is restricted to the application.\n * If this method is called on an axuielementObject representing the system-wide element, the search is not restricted to any particular application.  See [hs._asm.axuielement.systemElementAtPosition](#systemElementAtPosition).",
        "notes" : [
          " * This method can only be called on an axuielementObject that represents an application or the system-wide element (see [hs._asm.axuielement.systemWideElement](#systemWideElement)).",
          "",
          " * This function does hit-testing based on window z-order (that is, layering). If one window is on top of another window, the returned accessibility object comes from whichever window is topmost at the specified location.",
          " * If this method is called on an axuielementObject representing an application, the search is restricted to the application.",
          " * If this method is called on an axuielementObject representing the system-wide element, the search is not restricted to any particular application.  See [hs._asm.axuielement.systemElementAtPosition](#systemElementAtPosition)."
        ],
        "signature" : "hs._asm.axuielement:elementAtPosition(x, y | { x, y }) -> axuielementObject",
        "type" : "Method",
        "returns" : [
          " * an axuielementObject for the object at the specified coordinates, or nil if no object could be identified.",
          ""
        ],
        "name" : "elementAtPosition",
        "parameters" : [
          " * `x`, `y`   - the x and y coordinates of the screen location to test, provided as separate parameters",
          " * `{ x, y }` - the x and y coordinates of the screen location to test, provided as a point-table, like the one returned by `hs.mouse.getAbsolutePosition`.",
          ""
        ]
      },
      {
        "desc" : "Returns the value of an accessibility object's parameterized attribute.",
        "stripped_doc" : [
          "Returns the value of an accessibility object's parameterized attribute.",
          ""
        ],
        "def" : "hs._asm.axuielement:parameterizedAttributeValue(attribute, parameter) -> value",
        "doc" : "Returns the value of an accessibility object's parameterized attribute.\n\nParameters:\n * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:parameterizedAttributeNames](#parameterizedAttributeNames).\n * `parameter` - the parameter\n\nReturns:\n * the current value of the parameterized attribute, or nil if it has no value\n\nNotes:\n * Parameterized attribute support is still considered experimental and not fully supported yet.  Use with caution.",
        "notes" : [
          " * Parameterized attribute support is still considered experimental and not fully supported yet.  Use with caution."
        ],
        "signature" : "hs._asm.axuielement:parameterizedAttributeValue(attribute, parameter) -> value",
        "type" : "Method",
        "returns" : [
          " * the current value of the parameterized attribute, or nil if it has no value",
          ""
        ],
        "name" : "parameterizedAttributeValue",
        "parameters" : [
          " * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:parameterizedAttributeNames](#parameterizedAttributeNames).",
          " * `parameter` - the parameter",
          ""
        ]
      },
      {
        "desc" : "Sets the accessibility object's attribute to the specified value.",
        "stripped_doc" : [
          "Sets the accessibility object's attribute to the specified value.",
          ""
        ],
        "def" : "hs._asm.axuielement:setAttributeValue(attribute, value) -> axuielementObject | nil",
        "doc" : "Sets the accessibility object's attribute to the specified value.\n\nParameters:\n * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).\n * `value`     - the value to assign to the attribute\n\nReturns:\n * the axuielementObject on success; nil if the attribute could not be set.\n\nNotes:\n * This is still somewhat experimental and needs more testing; use with caution.",
        "notes" : [
          " * This is still somewhat experimental and needs more testing; use with caution."
        ],
        "signature" : "hs._asm.axuielement:setAttributeValue(attribute, value) -> axuielementObject | nil",
        "type" : "Method",
        "returns" : [
          " * the axuielementObject on success; nil if the attribute could not be set.",
          ""
        ],
        "name" : "setAttributeValue",
        "parameters" : [
          " * `attribute` - the name of the attribute, as specified by [hs._asm.axuielement:attributeNames](#attributeNames).",
          " * `value`     - the value to assign to the attribute",
          ""
        ]
      },
      {
        "desc" : "Query the accessibility object for all child objects (and their children...) and return them in a table.",
        "stripped_doc" : [
          "Query the accessibility object for all child objects (and their children...) and return them in a table.",
          "",
          "Paramters:",
          " * `parent`   - an optional boolean, default false, indicating that the parent of objects should be queried as well.",
          " * `callback` - an optional function callback which will receive the results of the query.  If a function is provided, the query will be performed in a background thread, and this method will return immediately.",
          ""
        ],
        "def" : "hs._asm.axuielement:getAllChildElements([parent], [callback]) -> table | axuielementObject",
        "doc" : "Query the accessibility object for all child objects (and their children...) and return them in a table.\n\nParamters:\n * `parent`   - an optional boolean, default false, indicating that the parent of objects should be queried as well.\n * `callback` - an optional function callback which will receive the results of the query.  If a function is provided, the query will be performed in a background thread, and this method will return immediately.\n\nReturns:\n * If no function callback is provided, this method will return a table containing this element, and all of the children (and optionally parents) of this element.  If a function callback is provided, this method returns the axuielementObject.\n\nNotes:\n * The table generated, either as the return value, or as the argument to the callback function, has the `hs._asm.axuielement.elementSearchTable` metatable assigned to it. See [hs._asm.axuielement:elementSearch](#elementSearch) for details on what this provides.\n\n * If `parent` is true, this method in effect provides all available accessibility objects for the application the object belongs to (or the focused application, if using the system-wide object).\n\n * If you do not provide a callback function, this method blocks Hammerspoon while it performs the query; such use is not recommended, especially if you set `parent` to true, as it can block for some time.",
        "notes" : [
          " * The table generated, either as the return value, or as the argument to the callback function, has the `hs._asm.axuielement.elementSearchTable` metatable assigned to it. See [hs._asm.axuielement:elementSearch](#elementSearch) for details on what this provides.",
          "",
          " * If `parent` is true, this method in effect provides all available accessibility objects for the application the object belongs to (or the focused application, if using the system-wide object).",
          "",
          " * If you do not provide a callback function, this method blocks Hammerspoon while it performs the query; such use is not recommended, especially if you set `parent` to true, as it can block for some time."
        ],
        "signature" : "hs._asm.axuielement:getAllChildElements([parent], [callback]) -> table | axuielementObject",
        "type" : "Method",
        "returns" : [
          " * If no function callback is provided, this method will return a table containing this element, and all of the children (and optionally parents) of this element.  If a function callback is provided, this method returns the axuielementObject.",
          ""
        ],
        "name" : "getAllChildElements",
        "parameters" : [

        ]
      },
      {
        "desc" : "If the element referes to an application, return an `hs.application` object for the element.",
        "stripped_doc" : [
          "If the element referes to an application, return an `hs.application` object for the element.",
          ""
        ],
        "def" : "hs._asm.axuielement:asHSApplication() -> hs.application object | nil",
        "doc" : "If the element referes to an application, return an `hs.application` object for the element.\n\nParameters:\n * None\n\nReturns:\n * if the element refers to an application, return an `hs.application` object for the element ; otherwise return nil\n\nNotes:\n * An element is considered an application by this method if it has an AXRole of AXApplication and has a process identifier (pid).",
        "notes" : [
          " * An element is considered an application by this method if it has an AXRole of AXApplication and has a process identifier (pid)."
        ],
        "signature" : "hs._asm.axuielement:asHSApplication() -> hs.application object | nil",
        "type" : "Method",
        "returns" : [
          " * if the element refers to an application, return an `hs.application` object for the element ; otherwise return nil",
          ""
        ],
        "name" : "asHSApplication",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "If the element referes to a window, return an `hs.window` object for the element.",
        "stripped_doc" : [
          "If the element referes to a window, return an `hs.window` object for the element.",
          ""
        ],
        "def" : "hs._asm.axuielement:asHSWindow() -> hs.window object | nil",
        "doc" : "If the element referes to a window, return an `hs.window` object for the element.\n\nParameters:\n * None\n\nReturns:\n * if the element refers to a window, return an `hs.window` object for the element ; otherwise return nil\n\nNotes:\n * An element is considered a window by this method if it has an AXRole of AXWindow.",
        "notes" : [
          " * An element is considered a window by this method if it has an AXRole of AXWindow."
        ],
        "signature" : "hs._asm.axuielement:asHSWindow() -> hs.window object | nil",
        "type" : "Method",
        "returns" : [
          " * if the element refers to a window, return an `hs.window` object for the element ; otherwise return nil",
          ""
        ],
        "name" : "asHSWindow",
        "parameters" : [
          " * None",
          ""
        ]
      }
    ],
    "name" : "hs._asm.axuielement"
  },
  {
    "Constant" : [
      {
        "desc" : "A table of common accessibility object notification names, provided for reference.",
        "stripped_doc" : [
          "A table of common accessibility object notification names, provided for reference.",
          ""
        ],
        "def" : "hs._asm.axuielement.observer.notifications[]",
        "doc" : "A table of common accessibility object notification names, provided for reference.\n\nNotes:\n * Notifications are application dependent and can be any string that the application developers choose; this list provides the suggested notification names found within the macOS Framework headers, but the list is not exhaustive nor is an application or element required to provide them.",
        "notes" : [
          " * Notifications are application dependent and can be any string that the application developers choose; this list provides the suggested notification names found within the macOS Framework headers, but the list is not exhaustive nor is an application or element required to provide them."
        ],
        "signature" : "hs._asm.axuielement.observer.notifications[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "notifications",
        "parameters" : [

        ]
      }
    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "desc" : "This submodule allows you to create observers for accessibility elements and be notified when they trigger notifications. Not all notifications are supported by all elements and not all elements support notifications, so some trial and error will be necessary, but for compliant applications, this can allow your code to be notified when an application's user interface changes in some way.",
    "Deprecated" : [

    ],
    "type" : "Module",
    "Constructor" : [
      {
        "desc" : "Creates a new observer object for the application with the specified process ID.",
        "stripped_doc" : [
          "Creates a new observer object for the application with the specified process ID.",
          ""
        ],
        "def" : "hs._asm.axuielement.observer.new(pid) -> observerObject",
        "doc" : "Creates a new observer object for the application with the specified process ID.\n\nParameters:\n * `pid` - the process ID of the application.\n\nReturns:\n * a new observerObject; generates an error if the pid does not exist or if the object cannot be created.\n\nNotes:\n * If you already have the `hs.application` object for an application, you can get its process ID with `hs.application:pid()`\n * If you already have an `hs._asm.axuielement` from the application you wish to observe (it doesn't have to be the application axuielement object, just one belonging to the application), you can get the process ID with `hs._asm.axuielement:pid()`.",
        "notes" : [
          " * If you already have the `hs.application` object for an application, you can get its process ID with `hs.application:pid()`",
          " * If you already have an `hs._asm.axuielement` from the application you wish to observe (it doesn't have to be the application axuielement object, just one belonging to the application), you can get the process ID with `hs._asm.axuielement:pid()`."
        ],
        "signature" : "hs._asm.axuielement.observer.new(pid) -> observerObject",
        "type" : "Constructor",
        "returns" : [
          " * a new observerObject; generates an error if the pid does not exist or if the object cannot be created.",
          ""
        ],
        "name" : "new",
        "parameters" : [
          " * `pid` - the process ID of the application.",
          ""
        ]
      }
    ],
    "doc" : "This submodule allows you to create observers for accessibility elements and be notified when they trigger notifications. Not all notifications are supported by all elements and not all elements support notifications, so some trial and error will be necessary, but for compliant applications, this can allow your code to be notified when an application's user interface changes in some way.\n\nThis is very much a work in progress, so bugs and comments are welcome.",
    "Field" : [

    ],
    "Command" : [

    ],
    "items" : [
      {
        "desc" : "A table of common accessibility object notification names, provided for reference.",
        "stripped_doc" : [
          "A table of common accessibility object notification names, provided for reference.",
          ""
        ],
        "def" : "hs._asm.axuielement.observer.notifications[]",
        "doc" : "A table of common accessibility object notification names, provided for reference.\n\nNotes:\n * Notifications are application dependent and can be any string that the application developers choose; this list provides the suggested notification names found within the macOS Framework headers, but the list is not exhaustive nor is an application or element required to provide them.",
        "notes" : [
          " * Notifications are application dependent and can be any string that the application developers choose; this list provides the suggested notification names found within the macOS Framework headers, but the list is not exhaustive nor is an application or element required to provide them."
        ],
        "signature" : "hs._asm.axuielement.observer.notifications[]",
        "type" : "Constant",
        "returns" : [

        ],
        "name" : "notifications",
        "parameters" : [

        ]
      },
      {
        "desc" : "Creates a new observer object for the application with the specified process ID.",
        "stripped_doc" : [
          "Creates a new observer object for the application with the specified process ID.",
          ""
        ],
        "def" : "hs._asm.axuielement.observer.new(pid) -> observerObject",
        "doc" : "Creates a new observer object for the application with the specified process ID.\n\nParameters:\n * `pid` - the process ID of the application.\n\nReturns:\n * a new observerObject; generates an error if the pid does not exist or if the object cannot be created.\n\nNotes:\n * If you already have the `hs.application` object for an application, you can get its process ID with `hs.application:pid()`\n * If you already have an `hs._asm.axuielement` from the application you wish to observe (it doesn't have to be the application axuielement object, just one belonging to the application), you can get the process ID with `hs._asm.axuielement:pid()`.",
        "notes" : [
          " * If you already have the `hs.application` object for an application, you can get its process ID with `hs.application:pid()`",
          " * If you already have an `hs._asm.axuielement` from the application you wish to observe (it doesn't have to be the application axuielement object, just one belonging to the application), you can get the process ID with `hs._asm.axuielement:pid()`."
        ],
        "signature" : "hs._asm.axuielement.observer.new(pid) -> observerObject",
        "type" : "Constructor",
        "returns" : [
          " * a new observerObject; generates an error if the pid does not exist or if the object cannot be created.",
          ""
        ],
        "name" : "new",
        "parameters" : [
          " * `pid` - the process ID of the application.",
          ""
        ]
      },
      {
        "desc" : "Registers the specified notification for the specified accesibility element with the observer.",
        "stripped_doc" : [
          "Registers the specified notification for the specified accesibility element with the observer.",
          ""
        ],
        "def" : "hs._asm.axuielement.observer:addWatcher(element, notification) -> observerObject",
        "doc" : "Registers the specified notification for the specified accesibility element with the observer.\n\nParameters:\n * `element`      - the `hs._asm.axuielement` representing an accessibility element of the application the observer was created for.\n * `notification` - a string specifying the notification.\n\nReturns:\n * the observerObject; generates an error if watcher cannot be registered\n\nNotes:\n * multiple notifications for the same accessibility element can be registered by invoking this method multiple times with the same element but different notification strings.\n * if the specified element and notification string are already registered, this method does nothing.\n * the notification string is application dependent and can be any string that the application developers choose; some common ones are found in `hs._asm.axuielement.observer.notifications`, but the list is not exhaustive nor is an application or element required to provide them.",
        "notes" : [
          " * multiple notifications for the same accessibility element can be registered by invoking this method multiple times with the same element but different notification strings.",
          " * if the specified element and notification string are already registered, this method does nothing.",
          " * the notification string is application dependent and can be any string that the application developers choose; some common ones are found in `hs._asm.axuielement.observer.notifications`, but the list is not exhaustive nor is an application or element required to provide them."
        ],
        "signature" : "hs._asm.axuielement.observer:addWatcher(element, notification) -> observerObject",
        "type" : "Method",
        "returns" : [
          " * the observerObject; generates an error if watcher cannot be registered",
          ""
        ],
        "name" : "addWatcher",
        "parameters" : [
          " * `element`      - the `hs._asm.axuielement` representing an accessibility element of the application the observer was created for.",
          " * `notification` - a string specifying the notification.",
          ""
        ]
      },
      {
        "desc" : "Get or set the callback for the observer.",
        "stripped_doc" : [
          "Get or set the callback for the observer.",
          ""
        ],
        "def" : "hs._asm.axuielement.observer:callback([fn | nil]) -> observerObject | fn | nil",
        "doc" : "Get or set the callback for the observer.\n\nParameters:\n * `fn` - a function, or an explicit nil to remove, specifying the callback to the observer will invoke when the assigned elements generate notifications.\n\nReturns:\n * If an argument is provided, the observerObject; otherwise the current value.\n\nNotes:\n * the callback should expect 4 arguments and return none. The arguments passed to the callback will be as follows:\n   * the observerObject itself\n   * the `hs._asm.axuielement` object for the accessibility element which generated the notification\n   * a string specifying the specific notification which was received\n   * a table containing key-value pairs with more information about the notification, if the element and notification type provide it. Commonly this will be an empty table indicating that no additional detail was provided.",
        "notes" : [
          " * the callback should expect 4 arguments and return none. The arguments passed to the callback will be as follows:",
          "   * the observerObject itself",
          "   * the `hs._asm.axuielement` object for the accessibility element which generated the notification",
          "   * a string specifying the specific notification which was received",
          "   * a table containing key-value pairs with more information about the notification, if the element and notification type provide it. Commonly this will be an empty table indicating that no additional detail was provided."
        ],
        "signature" : "hs._asm.axuielement.observer:callback([fn | nil]) -> observerObject | fn | nil",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the observerObject; otherwise the current value.",
          ""
        ],
        "name" : "callback",
        "parameters" : [
          " * `fn` - a function, or an explicit nil to remove, specifying the callback to the observer will invoke when the assigned elements generate notifications.",
          ""
        ]
      },
      {
        "desc" : "Returns true or false indicating whether the observer is currently watching for notifications and generating callbacks.",
        "stripped_doc" : [
          "Returns true or false indicating whether the observer is currently watching for notifications and generating callbacks.",
          ""
        ],
        "def" : "hs._asm.axuielement.observer:isRunning() -> boolean",
        "doc" : "Returns true or false indicating whether the observer is currently watching for notifications and generating callbacks.\n\nParameters:\n * None\n\nReturns:\n * a boolean value indicating whether or not the observer is currently active.",
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement.observer:isRunning() -> boolean",
        "type" : "Method",
        "returns" : [
          " * a boolean value indicating whether or not the observer is currently active."
        ],
        "name" : "isRunning",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Unregisters the specified notification for the specified accessibility element from the observer.",
        "stripped_doc" : [
          "Unregisters the specified notification for the specified accessibility element from the observer.",
          ""
        ],
        "def" : "hs._asm.axuielement.observer:removeWatcher(element, notification) -> observerObject",
        "doc" : "Unregisters the specified notification for the specified accessibility element from the observer.\n\nParameters:\n * `element`      - the `hs._asm.axuielement` representing an accessibility element of the application the observer was created for.\n * `notification` - a string specifying the notification.\n\nReturns:\n * the observerObject; generates an error if watcher cannot be unregistered\n\nNotes:\n * if the specified element and notification string are not currently registered with the observer, this method does nothing.",
        "notes" : [
          " * if the specified element and notification string are not currently registered with the observer, this method does nothing."
        ],
        "signature" : "hs._asm.axuielement.observer:removeWatcher(element, notification) -> observerObject",
        "type" : "Method",
        "returns" : [
          " * the observerObject; generates an error if watcher cannot be unregistered",
          ""
        ],
        "name" : "removeWatcher",
        "parameters" : [
          " * `element`      - the `hs._asm.axuielement` representing an accessibility element of the application the observer was created for.",
          " * `notification` - a string specifying the notification.",
          ""
        ]
      },
      {
        "desc" : "Start observing the application and trigger callbacks for the elements and notifications assigned.",
        "stripped_doc" : [
          "Start observing the application and trigger callbacks for the elements and notifications assigned.",
          ""
        ],
        "def" : "hs._asm.axuielement.observer:start() -> observerObject",
        "doc" : "Start observing the application and trigger callbacks for the elements and notifications assigned.\n\nParameters:\n * None\n\nReturns:\n * the observerObject\n\nNotes:\n * This method does nothing if the observer is already running",
        "notes" : [
          " * This method does nothing if the observer is already running"
        ],
        "signature" : "hs._asm.axuielement.observer:start() -> observerObject",
        "type" : "Method",
        "returns" : [
          " * the observerObject",
          ""
        ],
        "name" : "start",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Stop observing the application; no further callbacks will be generated.",
        "stripped_doc" : [
          "Stop observing the application; no further callbacks will be generated.",
          ""
        ],
        "def" : "hs._asm.axuielement.observer:stop() -> observerObject",
        "doc" : "Stop observing the application; no further callbacks will be generated.\n\nParameters:\n * None\n\nReturns:\n * the observerObject\n\nNotes:\n * This method does nothing if the observer is not currently running",
        "notes" : [
          " * This method does nothing if the observer is not currently running"
        ],
        "signature" : "hs._asm.axuielement.observer:stop() -> observerObject",
        "type" : "Method",
        "returns" : [
          " * the observerObject",
          ""
        ],
        "name" : "stop",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Returns a table of the notifications currently registered with the observer.",
        "stripped_doc" : [
          "Returns a table of the notifications currently registered with the observer.",
          ""
        ],
        "def" : "hs._asm.axuielement.observer:watching([element]) -> table",
        "doc" : "Returns a table of the notifications currently registered with the observer.\n\nParameters:\n * `element` - an optional `hs._asm.axuielement` to return a list of registered notifications for.\n\nReturns:\n * a table containing the currently registered notifications\n\nNotes:\n * If an element is specified, then the table returned will contain a list of strings specifying the specific notifications that the observer is watching that element for.\n * If no argument is specified, then the table will contain key-value pairs in which each key will be an `hs._asm.axuielement` that is being observed and the corresponding value will be a table containing a list of strings specifying the specific notifications that the observer is watching for from from that element.",
        "notes" : [
          " * If an element is specified, then the table returned will contain a list of strings specifying the specific notifications that the observer is watching that element for.",
          " * If no argument is specified, then the table will contain key-value pairs in which each key will be an `hs._asm.axuielement` that is being observed and the corresponding value will be a table containing a list of strings specifying the specific notifications that the observer is watching for from from that element."
        ],
        "signature" : "hs._asm.axuielement.observer:watching([element]) -> table",
        "type" : "Method",
        "returns" : [
          " * a table containing the currently registered notifications",
          ""
        ],
        "name" : "watching",
        "parameters" : [
          " * `element` - an optional `hs._asm.axuielement` to return a list of registered notifications for.",
          ""
        ]
      }
    ],
    "Method" : [
      {
        "desc" : "Start observing the application and trigger callbacks for the elements and notifications assigned.",
        "stripped_doc" : [
          "Start observing the application and trigger callbacks for the elements and notifications assigned.",
          ""
        ],
        "def" : "hs._asm.axuielement.observer:start() -> observerObject",
        "doc" : "Start observing the application and trigger callbacks for the elements and notifications assigned.\n\nParameters:\n * None\n\nReturns:\n * the observerObject\n\nNotes:\n * This method does nothing if the observer is already running",
        "notes" : [
          " * This method does nothing if the observer is already running"
        ],
        "signature" : "hs._asm.axuielement.observer:start() -> observerObject",
        "type" : "Method",
        "returns" : [
          " * the observerObject",
          ""
        ],
        "name" : "start",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Stop observing the application; no further callbacks will be generated.",
        "stripped_doc" : [
          "Stop observing the application; no further callbacks will be generated.",
          ""
        ],
        "def" : "hs._asm.axuielement.observer:stop() -> observerObject",
        "doc" : "Stop observing the application; no further callbacks will be generated.\n\nParameters:\n * None\n\nReturns:\n * the observerObject\n\nNotes:\n * This method does nothing if the observer is not currently running",
        "notes" : [
          " * This method does nothing if the observer is not currently running"
        ],
        "signature" : "hs._asm.axuielement.observer:stop() -> observerObject",
        "type" : "Method",
        "returns" : [
          " * the observerObject",
          ""
        ],
        "name" : "stop",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Returns true or false indicating whether the observer is currently watching for notifications and generating callbacks.",
        "stripped_doc" : [
          "Returns true or false indicating whether the observer is currently watching for notifications and generating callbacks.",
          ""
        ],
        "def" : "hs._asm.axuielement.observer:isRunning() -> boolean",
        "doc" : "Returns true or false indicating whether the observer is currently watching for notifications and generating callbacks.\n\nParameters:\n * None\n\nReturns:\n * a boolean value indicating whether or not the observer is currently active.",
        "notes" : [

        ],
        "signature" : "hs._asm.axuielement.observer:isRunning() -> boolean",
        "type" : "Method",
        "returns" : [
          " * a boolean value indicating whether or not the observer is currently active."
        ],
        "name" : "isRunning",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "desc" : "Get or set the callback for the observer.",
        "stripped_doc" : [
          "Get or set the callback for the observer.",
          ""
        ],
        "def" : "hs._asm.axuielement.observer:callback([fn | nil]) -> observerObject | fn | nil",
        "doc" : "Get or set the callback for the observer.\n\nParameters:\n * `fn` - a function, or an explicit nil to remove, specifying the callback to the observer will invoke when the assigned elements generate notifications.\n\nReturns:\n * If an argument is provided, the observerObject; otherwise the current value.\n\nNotes:\n * the callback should expect 4 arguments and return none. The arguments passed to the callback will be as follows:\n   * the observerObject itself\n   * the `hs._asm.axuielement` object for the accessibility element which generated the notification\n   * a string specifying the specific notification which was received\n   * a table containing key-value pairs with more information about the notification, if the element and notification type provide it. Commonly this will be an empty table indicating that no additional detail was provided.",
        "notes" : [
          " * the callback should expect 4 arguments and return none. The arguments passed to the callback will be as follows:",
          "   * the observerObject itself",
          "   * the `hs._asm.axuielement` object for the accessibility element which generated the notification",
          "   * a string specifying the specific notification which was received",
          "   * a table containing key-value pairs with more information about the notification, if the element and notification type provide it. Commonly this will be an empty table indicating that no additional detail was provided."
        ],
        "signature" : "hs._asm.axuielement.observer:callback([fn | nil]) -> observerObject | fn | nil",
        "type" : "Method",
        "returns" : [
          " * If an argument is provided, the observerObject; otherwise the current value.",
          ""
        ],
        "name" : "callback",
        "parameters" : [
          " * `fn` - a function, or an explicit nil to remove, specifying the callback to the observer will invoke when the assigned elements generate notifications.",
          ""
        ]
      },
      {
        "desc" : "Registers the specified notification for the specified accesibility element with the observer.",
        "stripped_doc" : [
          "Registers the specified notification for the specified accesibility element with the observer.",
          ""
        ],
        "def" : "hs._asm.axuielement.observer:addWatcher(element, notification) -> observerObject",
        "doc" : "Registers the specified notification for the specified accesibility element with the observer.\n\nParameters:\n * `element`      - the `hs._asm.axuielement` representing an accessibility element of the application the observer was created for.\n * `notification` - a string specifying the notification.\n\nReturns:\n * the observerObject; generates an error if watcher cannot be registered\n\nNotes:\n * multiple notifications for the same accessibility element can be registered by invoking this method multiple times with the same element but different notification strings.\n * if the specified element and notification string are already registered, this method does nothing.\n * the notification string is application dependent and can be any string that the application developers choose; some common ones are found in `hs._asm.axuielement.observer.notifications`, but the list is not exhaustive nor is an application or element required to provide them.",
        "notes" : [
          " * multiple notifications for the same accessibility element can be registered by invoking this method multiple times with the same element but different notification strings.",
          " * if the specified element and notification string are already registered, this method does nothing.",
          " * the notification string is application dependent and can be any string that the application developers choose; some common ones are found in `hs._asm.axuielement.observer.notifications`, but the list is not exhaustive nor is an application or element required to provide them."
        ],
        "signature" : "hs._asm.axuielement.observer:addWatcher(element, notification) -> observerObject",
        "type" : "Method",
        "returns" : [
          " * the observerObject; generates an error if watcher cannot be registered",
          ""
        ],
        "name" : "addWatcher",
        "parameters" : [
          " * `element`      - the `hs._asm.axuielement` representing an accessibility element of the application the observer was created for.",
          " * `notification` - a string specifying the notification.",
          ""
        ]
      },
      {
        "desc" : "Unregisters the specified notification for the specified accessibility element from the observer.",
        "stripped_doc" : [
          "Unregisters the specified notification for the specified accessibility element from the observer.",
          ""
        ],
        "def" : "hs._asm.axuielement.observer:removeWatcher(element, notification) -> observerObject",
        "doc" : "Unregisters the specified notification for the specified accessibility element from the observer.\n\nParameters:\n * `element`      - the `hs._asm.axuielement` representing an accessibility element of the application the observer was created for.\n * `notification` - a string specifying the notification.\n\nReturns:\n * the observerObject; generates an error if watcher cannot be unregistered\n\nNotes:\n * if the specified element and notification string are not currently registered with the observer, this method does nothing.",
        "notes" : [
          " * if the specified element and notification string are not currently registered with the observer, this method does nothing."
        ],
        "signature" : "hs._asm.axuielement.observer:removeWatcher(element, notification) -> observerObject",
        "type" : "Method",
        "returns" : [
          " * the observerObject; generates an error if watcher cannot be unregistered",
          ""
        ],
        "name" : "removeWatcher",
        "parameters" : [
          " * `element`      - the `hs._asm.axuielement` representing an accessibility element of the application the observer was created for.",
          " * `notification` - a string specifying the notification.",
          ""
        ]
      },
      {
        "desc" : "Returns a table of the notifications currently registered with the observer.",
        "stripped_doc" : [
          "Returns a table of the notifications currently registered with the observer.",
          ""
        ],
        "def" : "hs._asm.axuielement.observer:watching([element]) -> table",
        "doc" : "Returns a table of the notifications currently registered with the observer.\n\nParameters:\n * `element` - an optional `hs._asm.axuielement` to return a list of registered notifications for.\n\nReturns:\n * a table containing the currently registered notifications\n\nNotes:\n * If an element is specified, then the table returned will contain a list of strings specifying the specific notifications that the observer is watching that element for.\n * If no argument is specified, then the table will contain key-value pairs in which each key will be an `hs._asm.axuielement` that is being observed and the corresponding value will be a table containing a list of strings specifying the specific notifications that the observer is watching for from from that element.",
        "notes" : [
          " * If an element is specified, then the table returned will contain a list of strings specifying the specific notifications that the observer is watching that element for.",
          " * If no argument is specified, then the table will contain key-value pairs in which each key will be an `hs._asm.axuielement` that is being observed and the corresponding value will be a table containing a list of strings specifying the specific notifications that the observer is watching for from from that element."
        ],
        "signature" : "hs._asm.axuielement.observer:watching([element]) -> table",
        "type" : "Method",
        "returns" : [
          " * a table containing the currently registered notifications",
          ""
        ],
        "name" : "watching",
        "parameters" : [
          " * `element` - an optional `hs._asm.axuielement` to return a list of registered notifications for.",
          ""
        ]
      }
    ],
    "name" : "hs._asm.axuielement.observer"
  }
]
